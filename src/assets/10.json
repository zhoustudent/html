{"code":0,"success":true,"data":{"has_more":true,"page_token":"hVXwwtY4Eqnok9X6vFjLPT79mr6W/lzpkSlQTeytnUc=","assessments_list":[{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239915886116","question_title":"CSS优先级","i18n_question_title":"CSS优先级","question_skill_list":[{"name":"CSS","i18n_name":"CSS","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"页面中有10个逐层嵌套的div元素，最底层的div元素有个名为 'div' 的class，对最底层div应用以下两条css规则，问最底层div的颜色？如果规则顺序前后对调呢？请说明原因。\n规则：\n```css\n.div {\n    color: blue;\n}\ndiv > div > div > ... > div { /* 10个div */\n    color: red;\n}\n```","i18n_question_description":"页面中有10个逐层嵌套的div元素，最底层的div元素有个名为 'div' 的class，对最底层div应用以下两条css规则，问最底层div的颜色？如果规则顺序前后对调呢？请说明原因。\n规则：\n```css\n.div {\n    color: blue;\n}\ndiv > div > div > ... > div { /* 10个div */\n    color: red;\n}\n```","question_answer":"对调前后都是蓝色；\nID 选择器， 如 #id{}\n类选择器， 如 .class{}\n属性选择器， 如 a[href=\"segmentfault.com\"]{}\n伪类选择器， 如 :hover{}\n伪元素选择器， 如 ::before{}\n标签选择器， 如 span{}\n通配选择器， 如 *{}\n优先级关系：内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器\n另外就是选择器的权值不能进位\n3分：写出都是blue得分","i18n_question_answer":"对调前后都是蓝色；\nID 选择器， 如 #id{}\n类选择器， 如 .class{}\n属性选择器， 如 a[href=\"segmentfault.com\"]{}\n伪类选择器， 如 :hover{}\n伪元素选择器， 如 ::before{}\n标签选择器， 如 span{}\n通配选择器， 如 *{}\n优先级关系：内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器\n另外就是选择器的权值不能进位\n3分：写出都是blue得分","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971485215","question_title":"CSS 属性 box-sizing的值有哪些？分别有什么含义？","i18n_question_title":"CSS 属性 box-sizing的值有哪些？分别有什么含义？","question_skill_list":[{"name":"CSS","i18n_name":"CSS","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"CSS 属性 box-sizing的值有哪些？分别有什么含义？","i18n_question_description":"CSS 属性 box-sizing的值有哪些？分别有什么含义？","question_answer":"- `content-box` 默认值，width内容宽度\n\t- `border-box` width 包含`padding`和`border`\n1. 2.5分及以下：\n2. 3.0分：\n3. 3.5分：\n4. 4.0分：","i18n_question_answer":"- `content-box` 默认值，width内容宽度\n\t- `border-box` width 包含`padding`和`border`\n1. 2.5分及以下：\n2. 3.0分：\n3. 3.5分：\n4. 4.0分：","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239916082724","question_title":"WebGL支持那些绘制模式？","i18n_question_title":"WebGL支持那些绘制模式？","question_skill_list":[{"name":"可视化","i18n_name":"可视化","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"WebGL支持这些____、______、_____、_____、_____、_____、_______ 绘图模式","i18n_question_description":"WebGL支持这些____、______、_____、_____、_____、_____、_______ 绘图模式","question_answer":"POINTS,\nLINES\nLINE_STRIP\nLINE_LOOP\nTRIANGLES\nTRIANGLE_STRIP\nTRIANGLE_FAN\n能回答至少3个模式","i18n_question_answer":"POINTS,\nLINES\nLINE_STRIP\nLINE_LOOP\nTRIANGLES\nTRIANGLE_STRIP\nTRIANGLE_FAN\n能回答至少3个模式","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239917049380","question_title":"以下函数的作用是?空白区域应该填写什么","i18n_question_title":"以下函数的作用是?空白区域应该填写什么","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"代码如下：\n```js\n// define\n(function (window) {\n    function fn(str) {\n        this.str = str;\n    }\n    fn.prototype.format = function () {\n        var arg = __1__;\n        return this.str.replace(__2__, function (a, b) {\n            return arg[b] || '';\n        });\n    };\n    window.fn = fn;\n})(window);\n// use\n(function () {\n    var t = new fn('<a href=\"{0}\">{1}</a><span>{2}</span>\n');\n    console.log(t.format('http://www.alibaba.com', 'Alibaba', 'Welcome'));\n})();\n```","i18n_question_description":"代码如下：\n```js\n// define\n(function (window) {\n    function fn(str) {\n        this.str = str;\n    }\n    fn.prototype.format = function () {\n        var arg = __1__;\n        return this.str.replace(__2__, function (a, b) {\n            return arg[b] || '';\n        });\n    };\n    window.fn = fn;\n})(window);\n// use\n(function () {\n    var t = new fn('<a href=\"{0}\">{1}</a><span>{2}</span>\n');\n    console.log(t.format('http://www.alibaba.com', 'Alibaba', 'Welcome'));\n})();\n```","question_answer":"简单考虑模板引擎原理：\ndefine部分定义一个简单的模板类，使用{}作为转义标记，中间的数字表示替换目标，format实参用来替换模板内标记 横线处填：\n1. Array.prototype.slice.call(arguments, 0)\n2. /\\{\\s*(\\d+)\\s*\\}/g\n1. 2.5分及以下：不知道答案\n2. 3.0分：有正确答案\n3. 3.5分：有正确答案，并能够给出详细解答\n4. 4.0分：","i18n_question_answer":"简单考虑模板引擎原理：\ndefine部分定义一个简单的模板类，使用{}作为转义标记，中间的数字表示替换目标，format实参用来替换模板内标记 横线处填：\n1. Array.prototype.slice.call(arguments, 0)\n2. /\\{\\s*(\\d+)\\s*\\}/g\n1. 2.5分及以下：不知道答案\n2. 3.0分：有正确答案\n3. 3.5分：有正确答案，并能够给出详细解答\n4. 4.0分：","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445585932781092","question_title":"模拟实现loadash中的_.get()函数，实现如下传入参数取值效果","i18n_question_title":"模拟实现loadash中的_.get()函数，实现如下传入参数取值效果","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"```javascript\nfunction get() {\n  // 请补全函数参数和实现逻辑\n}\nconst obj = { selector: { to: { toutiao: 'FE coder' } }, target: [1, 2, { name: 'byted' }] };\n// 运行代码\nget(obj, 'selector.to.toutiao', 'target[0]', 'target[2].name')\n//  输出结果：\n// ['FE coder', 1, 'byted']\n```","i18n_question_description":"```javascript\nfunction get() {\n  // 请补全函数参数和实现逻辑\n}\nconst obj = { selector: { to: { toutiao: 'FE coder' } }, target: [1, 2, { name: 'byted' }] };\n// 运行代码\nget(obj, 'selector.to.toutiao', 'target[0]', 'target[2].name')\n//  输出结果：\n// ['FE coder', 1, 'byted']\n```","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"const get = (from, ...selectors) =>\\n\"},{\"insert\":\" [...selectors].map(s =>\\n\"},{\"insert\":\" s\\n\"},{\"insert\":\" .replace(/\\\\[([^\\\\[\\\\]]*)\\\\]/g, '.$1.')\\n\"},{\"insert\":\" .split('.')\\n\"},{\"insert\":\" .filter(t => t !== '')\\n\"},{\"insert\":\" .reduce((prev, cur) => prev && prev[cur], from)\\n\"},{\"insert\":\" );\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. Use Array.map() for each selector\\n\"},{\"insert\":\"2. String.replace() to replace square brackets with dots\\n\"},{\"insert\":\"3. String.split('.') to split each selector\\n\"},{\"insert\":\"4. Array.filter() to remove empty values\\n\"},{\"insert\":\"5. Array.reduce() to get the value indicated by it\\n\"},{\"insert\":\"1. 2.5分及以下：完全没有求解思路\\n\"},{\"insert\":\"2. 3.0分：能使用map，replace，split等对给的目标对象进行拆解，\\n\"},{\"insert\":\"3. 3.5分：能使用filter和reduce等对计算的结果进行过滤取值返回\\n\"},{\"insert\":\"4. 4.0分：能完整实现_.get的逻辑，代码清晰无bug，能使用rest运算，结果按数组返回等细节考虑。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"const get = (from, ...selectors) =>\\n\"},{\"insert\":\" [...selectors].map(s =>\\n\"},{\"insert\":\" s\\n\"},{\"insert\":\" .replace(/\\\\[([^\\\\[\\\\]]*)\\\\]/g, '.$1.')\\n\"},{\"insert\":\" .split('.')\\n\"},{\"insert\":\" .filter(t => t !== '')\\n\"},{\"insert\":\" .reduce((prev, cur) => prev && prev[cur], from)\\n\"},{\"insert\":\" );\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. Use Array.map() for each selector\\n\"},{\"insert\":\"2. String.replace() to replace square brackets with dots\\n\"},{\"insert\":\"3. String.split('.') to split each selector\\n\"},{\"insert\":\"4. Array.filter() to remove empty values\\n\"},{\"insert\":\"5. Array.reduce() to get the value indicated by it\\n\"},{\"insert\":\"1. 2.5分及以下：完全没有求解思路\\n\"},{\"insert\":\"2. 3.0分：能使用map，replace，split等对给的目标对象进行拆解，\\n\"},{\"insert\":\"3. 3.5分：能使用filter和reduce等对计算的结果进行过滤取值返回\\n\"},{\"insert\":\"4. 4.0分：能完整实现_.get的逻辑，代码清晰无bug，能使用rest运算，结果按数组返回等细节考虑。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308028685","question_title":"请介绍一下Oauth2.0 的认证过程","i18n_question_title":"请介绍一下Oauth2.0 的认证过程","question_skill_list":[{"name":"前后端协作","i18n_name":"前后端协作","nick_name":null,"description":null},{"name":"工程设计","i18n_name":"工程设计","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"如题","i18n_question_description":"如题","question_answer":"回答的一个重点是 code（授权码）仅一次有效，并且要有失效时间，而且很短，比如一分钟，\n因为浏览器收到会立刻跳转。\n还有就是服务端可以根据 code 结合相应的 sercet 去获取 token，要说清楚。\n1. 2.5分及以下：只是介绍了 Oauth 的用途，比如第三方可以登录、可以获取账号信息，无法介绍技术流程；\n2. 3.0分：回答清楚了整体流程；\n3. 3.5分：能够介绍出 code 仅一次有效，申请方需要有 sercet，并且结合 code 去换取 token 的过程及原因；\n4. 4.0分：还能够介绍出可能的其他安全问题；","i18n_question_answer":"回答的一个重点是 code（授权码）仅一次有效，并且要有失效时间，而且很短，比如一分钟，\n因为浏览器收到会立刻跳转。\n还有就是服务端可以根据 code 结合相应的 sercet 去获取 token，要说清楚。\n1. 2.5分及以下：只是介绍了 Oauth 的用途，比如第三方可以登录、可以获取账号信息，无法介绍技术流程；\n2. 3.0分：回答清楚了整体流程；\n3. 3.5分：能够介绍出 code 仅一次有效，申请方需要有 sercet，并且结合 code 去换取 token 的过程及原因；\n4. 4.0分：还能够介绍出可能的其他安全问题；","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239916820004","question_title":"说出两种对JavaScript应用程序开发重要的编程范式。","i18n_question_title":"说出两种对JavaScript应用程序开发重要的编程范式。","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"说出两种对JavaScript应用程序开发重要的编程范式。","i18n_question_description":"说出两种对JavaScript应用程序开发重要的编程范式。","question_answer":"JavaScript是一种多范型语言  \n1. 支持命令/过程编程，支持OOP（面向对象编程）和函数式编程。\n2. JavaScript支持面向对象的原型继承。\n1. 2.5分及以下：没有线索范式是什么，没有提到原型对象或者函数编程不得分。\n2. 3.0分：了解原型继承、了解函数式编程（或闭包、lambda表达式）","i18n_question_answer":"JavaScript是一种多范型语言  \n1. 支持命令/过程编程，支持OOP（面向对象编程）和函数式编程。\n2. JavaScript支持面向对象的原型继承。\n1. 2.5分及以下：没有线索范式是什么，没有提到原型对象或者函数编程不得分。\n2. 3.0分：了解原型继承、了解函数式编程（或闭包、lambda表达式）","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445595297318436","question_title":"如何判断一个 JS 对象为空对象","i18n_question_title":"如何判断一个 JS 对象为空对象","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null},{"name":"es","i18n_name":"es","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"如何判断一个 JS 对象为空对象 ？空对象形如`{}`","i18n_question_description":"如何判断一个 JS 对象为空对象 ？空对象形如`{}`","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"使用 for in\\n\"},{\"insert\":\" javascript\\n\"},{\"insert\":\" function isEmptyObject(obj){\\n\"},{\"insert\":\" for(var key in obj){\\n\"},{\"insert\":\" return false\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\" return true\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"2. 通过 JSON.stringify 方法来判断\\n\"},{\"insert\":\" javascript\\n\"},{\"insert\":\" if(JSON.stringify({}) === '{}'){\\n\"},{\"insert\":\" console.log('empty obj');\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"3. 使用 ES6 增加的 Object.keys()\\n\"},{\"insert\":\" javascript\\n\"},{\"insert\":\" if(Object.keys(obj).length === 0){\\n\"},{\"insert\":\" console.log('empty obj');\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有思路，或错误\\n\"},{\"insert\":\"2. 3.0分：能答出一种有效方法\\n\"},{\"insert\":\"3. 3.5分：能答出一种方法以上\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"使用 for in\\n\"},{\"insert\":\" javascript\\n\"},{\"insert\":\" function isEmptyObject(obj){\\n\"},{\"insert\":\" for(var key in obj){\\n\"},{\"insert\":\" return false\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\" return true\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"2. 通过 JSON.stringify 方法来判断\\n\"},{\"insert\":\" javascript\\n\"},{\"insert\":\" if(JSON.stringify({}) === '{}'){\\n\"},{\"insert\":\" console.log('empty obj');\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"3. 使用 ES6 增加的 Object.keys()\\n\"},{\"insert\":\" javascript\\n\"},{\"insert\":\" if(Object.keys(obj).length === 0){\\n\"},{\"insert\":\" console.log('empty obj');\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有思路，或错误\\n\"},{\"insert\":\"2. 3.0分：能答出一种有效方法\\n\"},{\"insert\":\"3. 3.5分：能答出一种方法以上\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445596262581790","question_title":"JS编码二叉树的实现与遍历","i18n_question_title":"JS编码二叉树的实现与遍历","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null},{"name":"基础算法","i18n_name":"基础算法","nick_name":null,"description":null},{"name":"树","i18n_name":"树","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"JS编码实现一个二叉树的构造函数，包括节点类Node，树类BST，插入节点函数insert，\n并且满足\n1.左子节点的值 < 父节点的值 <= 右子节点的值\n2.可以实现先序，中序，后续遍历","i18n_question_description":"JS编码实现一个二叉树的构造函数，包括节点类Node，树类BST，插入节点函数insert，\n并且满足\n1.左子节点的值 < 父节点的值 <= 右子节点的值\n2.可以实现先序，中序，后续遍历","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"// 二叉树\\n\"},{\"insert\":\"function BST() {\\n\"},{\"insert\":\" this.root = null;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"BST.prototype.insert = function(data) {\\n\"},{\"insert\":\" var n = new Node(data, null, null);\\n\"},{\"insert\":\" if (this.root === null) {\\n\"},{\"insert\":\" this.root = n;\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" var current = this.root;\\n\"},{\"insert\":\" for (;;) {\\n\"},{\"insert\":\" if (data < current.data) {\\n\"},{\"insert\":\" if (current.left === null) {\\n\"},{\"insert\":\" current.left = n;\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" current = current.left;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" if (current.right === null) {\\n\"},{\"insert\":\" current.right = n;\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" current = current.right;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 先序遍历\\n\"},{\"insert\":\"BST.prototype.preOrder = function(node) {\\n\"},{\"insert\":\" if (node !== null) {\\n\"},{\"insert\":\" console.log(node.show() + \\\" \\\");\\n\"},{\"insert\":\" this.preOrder(node.left);\\n\"},{\"insert\":\" this.preOrder(node.right);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 中序遍历\\n\"},{\"insert\":\"BST.prototype.inOrder = function(node) {\\n\"},{\"insert\":\" if (node !== null) {\\n\"},{\"insert\":\" this.inOrder(node.left);\\n\"},{\"insert\":\" console.log(node.show() + \\\" \\\");\\n\"},{\"insert\":\" this.inOrder(node.right);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 后序遍历\\n\"},{\"insert\":\"BST.prototype.postOrder = function(node) {\\n\"},{\"insert\":\" if (node !== null) {\\n\"},{\"insert\":\" this.postOrder(node.left);\\n\"},{\"insert\":\" this.postOrder(node.right);\\n\"},{\"insert\":\" console.log(node.show() + \\\" \\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 节点对象\\n\"},{\"insert\":\"function Node(data, left, right) {\\n\"},{\"insert\":\" this.data = data;\\n\"},{\"insert\":\" this.left = left;\\n\"},{\"insert\":\" this.right = right;\\n\"},{\"insert\":\" this.show = function() {\\n\"},{\"insert\":\" return this.data;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 测试代码\\n\"},{\"insert\":\"var bst = new BST();\\n\"},{\"insert\":\"var nums = [10, 3, 18, 2, 4, 13, 21, 9, 8, 9];\\n\"},{\"insert\":\"for (var i = 0; i < nums.length; i++) {\\n\"},{\"insert\":\" bst.insert(nums[i]);\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"bst.preOrder(bst.root);\\n\"},{\"insert\":\"bst.inOrder(bst.root);\\n\"},{\"insert\":\"bst.postOrder(bst.root);\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：对二叉树没有基本的认识，写不出来基本的构造函数\\n\"},{\"insert\":\"2. 3.0分：可以构造出二叉树的基本模型\\n\"},{\"insert\":\"3. 3.5分：满足3分基础上，可以写出先序中序后续遍历的代码，可以用非递归酌情加分\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"// 二叉树\\n\"},{\"insert\":\"function BST() {\\n\"},{\"insert\":\" this.root = null;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"BST.prototype.insert = function(data) {\\n\"},{\"insert\":\" var n = new Node(data, null, null);\\n\"},{\"insert\":\" if (this.root === null) {\\n\"},{\"insert\":\" this.root = n;\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" var current = this.root;\\n\"},{\"insert\":\" for (;;) {\\n\"},{\"insert\":\" if (data < current.data) {\\n\"},{\"insert\":\" if (current.left === null) {\\n\"},{\"insert\":\" current.left = n;\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" current = current.left;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" if (current.right === null) {\\n\"},{\"insert\":\" current.right = n;\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" current = current.right;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 先序遍历\\n\"},{\"insert\":\"BST.prototype.preOrder = function(node) {\\n\"},{\"insert\":\" if (node !== null) {\\n\"},{\"insert\":\" console.log(node.show() + \\\" \\\");\\n\"},{\"insert\":\" this.preOrder(node.left);\\n\"},{\"insert\":\" this.preOrder(node.right);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 中序遍历\\n\"},{\"insert\":\"BST.prototype.inOrder = function(node) {\\n\"},{\"insert\":\" if (node !== null) {\\n\"},{\"insert\":\" this.inOrder(node.left);\\n\"},{\"insert\":\" console.log(node.show() + \\\" \\\");\\n\"},{\"insert\":\" this.inOrder(node.right);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 后序遍历\\n\"},{\"insert\":\"BST.prototype.postOrder = function(node) {\\n\"},{\"insert\":\" if (node !== null) {\\n\"},{\"insert\":\" this.postOrder(node.left);\\n\"},{\"insert\":\" this.postOrder(node.right);\\n\"},{\"insert\":\" console.log(node.show() + \\\" \\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 节点对象\\n\"},{\"insert\":\"function Node(data, left, right) {\\n\"},{\"insert\":\" this.data = data;\\n\"},{\"insert\":\" this.left = left;\\n\"},{\"insert\":\" this.right = right;\\n\"},{\"insert\":\" this.show = function() {\\n\"},{\"insert\":\" return this.data;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 测试代码\\n\"},{\"insert\":\"var bst = new BST();\\n\"},{\"insert\":\"var nums = [10, 3, 18, 2, 4, 13, 21, 9, 8, 9];\\n\"},{\"insert\":\"for (var i = 0; i < nums.length; i++) {\\n\"},{\"insert\":\" bst.insert(nums[i]);\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"bst.preOrder(bst.root);\\n\"},{\"insert\":\"bst.inOrder(bst.root);\\n\"},{\"insert\":\"bst.postOrder(bst.root);\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：对二叉树没有基本的认识，写不出来基本的构造函数\\n\"},{\"insert\":\"2. 3.0分：可以构造出二叉树的基本模型\\n\"},{\"insert\":\"3. 3.5分：满足3分基础上，可以写出先序中序后续遍历的代码，可以用非递归酌情加分\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239915656740","question_title":"页面文档流的理解","i18n_question_title":"页面文档流的理解","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"在页面中间加入\n```javascript\n1\n<script>\ndocument.write('2')\n</script>\n3\n```\n和\n```javascript\n1\n<script>\nwindow.onload = function () {\n     document.write('2')\n}\n</script>\n3\n```\n的区别,\n在head处进行什么样的操作可以阻止底下的页面dom渲染。","i18n_question_description":"在页面中间加入\n```javascript\n1\n<script>\ndocument.write('2')\n</script>\n3\n```\n和\n```javascript\n1\n<script>\nwindow.onload = function () {\n     document.write('2')\n}\n</script>\n3\n```\n的区别,\n在head处进行什么样的操作可以阻止底下的页面dom渲染。","question_answer":"第一个结果是123\n第二个结果是2\n第三个：考核点是document.write和document.open \ndocument.write在页面文档加载完成前可直接写入文档，所以写入注释可阻止渲染，而 document.open 是新开一个文档流，必然阻止当前文档流\n正确描述给 3 分","i18n_question_answer":"第一个结果是123\n第二个结果是2\n第三个：考核点是document.write和document.open \ndocument.write在页面文档加载完成前可直接写入文档，所以写入注释可阻止渲染，而 document.open 是新开一个文档流，必然阻止当前文档流\n正确描述给 3 分","status_end_time":null,"assessment_create_time":null}],"BaseResp":{"StatusMessage":"SUCCESS","StatusCode":0,"Extra":null}},"message":"OK","special_case_code":0}
