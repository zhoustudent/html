{"code":0,"success":true,"data":{"has_more":true,"page_token":"K3No5C7XSMeGhW1mZ/4N3Ut6NSLulc2/nX0qVo2MKtQ=","assessments_list":[{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239916426788","question_title":"js中call和apply有什么区别？","i18n_question_title":"js中call和apply有什么区别？","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"js中call和apply有什么区别？","i18n_question_description":"js中call和apply有什么区别？","question_answer":"1.  语法的区别\ncall是分散的参数，apply的参数是数组\n2.  性能的区别\ncall比apply快，为什么call比apply快\n1. 2.5分及以下：\n只能说出语法区别\n2. 3.0分：\n能说出语法区别和性能区别\n3. 3.5分：\n有看过loadsh或者jquery对apply的重写，加分\n```javascript\nfunction apply(func, thisArg, args) {\n  var length = args.length;\n  switch (length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n```\n4. 4.0分：","i18n_question_answer":"1.  语法的区别\ncall是分散的参数，apply的参数是数组\n2.  性能的区别\ncall比apply快，为什么call比apply快\n1. 2.5分及以下：\n只能说出语法区别\n2. 3.0分：\n能说出语法区别和性能区别\n3. 3.5分：\n有看过loadsh或者jquery对apply的重写，加分\n```javascript\nfunction apply(func, thisArg, args) {\n  var length = args.length;\n  switch (length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n```\n4. 4.0分：","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239916246564","question_title":"登录表单设计/扫码登录/第三方登录","i18n_question_title":"登录表单设计/扫码登录/第三方登录","question_skill_list":[{"name":"HTML","i18n_name":"HTML","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"1. 请实现一个登录表单\n2. 用GET方法行不行？csrf是什么？如何防御？\n3. cookie-sesssion的工作机制\n4. 你已经登录产品的App端，要在web实现扫码登录，该如何设计？\n5. 接入第三方登录（如微信），如何设计？","i18n_question_description":"1. 请实现一个登录表单\n2. 用GET方法行不行？csrf是什么？如何防御？\n3. cookie-sesssion的工作机制\n4. 你已经登录产品的App端，要在web实现扫码登录，该如何设计？\n5. 接入第三方登录（如微信），如何设计？","question_answer":"1. 正确书写html\n2. 正确回答GET和POST的区别，从语义、弊端、安全等方面。csrf的防御：token，samesite，referer校验（弊端）等\n3. 正确理解cookie-session的工作机制，sessionId的设计，存储\n4. 考察对司空见惯的扫码登录，是否有思考其实现。正确设计 Client/Server/App 三方流程，设计二维码存储的内容，client通知有轮训或websocket等解决方案\n5. 正确理解 Client/Server/App/Weixin Server 四方流程，理解oauth2协议\n1. 2.5分及以下：\n无法精确理解GET/POST差别，不了解常见安全防御手段，不理解cookie-session的工作机制\n2. 3.0分：\n对前4问都达到75%的基本覆盖。\n3. 3.5分：\n能够给出清晰、完整的流程设计，给出完备的前端实现\n4. 4.0分：\n了解server端的一些工作内容（session存储，密码存储等）。\n理解oauth2协议。\n会考虑到非自己App扫二维码的时，根据UA跳转不同的下载网页。","i18n_question_answer":"1. 正确书写html\n2. 正确回答GET和POST的区别，从语义、弊端、安全等方面。csrf的防御：token，samesite，referer校验（弊端）等\n3. 正确理解cookie-session的工作机制，sessionId的设计，存储\n4. 考察对司空见惯的扫码登录，是否有思考其实现。正确设计 Client/Server/App 三方流程，设计二维码存储的内容，client通知有轮训或websocket等解决方案\n5. 正确理解 Client/Server/App/Weixin Server 四方流程，理解oauth2协议\n1. 2.5分及以下：\n无法精确理解GET/POST差别，不了解常见安全防御手段，不理解cookie-session的工作机制\n2. 3.0分：\n对前4问都达到75%的基本覆盖。\n3. 3.5分：\n能够给出清晰、完整的流程设计，给出完备的前端实现\n4. 4.0分：\n了解server端的一些工作内容（session存储，密码存储等）。\n理解oauth2协议。\n会考虑到非自己App扫二维码的时，根据UA跳转不同的下载网页。","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971878431","question_title":"JavaScript this 考察","i18n_question_title":"JavaScript this 考察","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"下面代码输出的结果是什么？\nvar length = 10;\nfunction fn() {\n\treturn this.length+1;\n}\nvar obj = {\n\tlength: 5,\n\ttest1: function() {\n\t\treturn fn();\n\t}\n};\nobj.test2=fn;\n//下面代码输出是什么\nconsole.log(obj.test1())\nconsole.log(fn()===obj.test2())","i18n_question_description":"下面代码输出的结果是什么？\nvar length = 10;\nfunction fn() {\n\treturn this.length+1;\n}\nvar obj = {\n\tlength: 5,\n\ttest1: function() {\n\t\treturn fn();\n\t}\n};\nobj.test2=fn;\n//下面代码输出是什么\nconsole.log(obj.test1())\nconsole.log(fn()===obj.test2())","question_answer":"11, false(11===6)","i18n_question_answer":"11, false(11===6)","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971698207","question_title":"如何实现一个 sleep 函数?","i18n_question_title":"如何实现一个 sleep 函数?","question_skill_list":[{"name":"Node.js","i18n_name":"Node.js","nick_name":null,"description":null}],"score":null,"content":null,"question_description":null,"i18n_question_description":null,"question_answer":"function sleep(ms) {\n  var start = Date.now(), expire = start + ms;\n  while (Date.now() < expire) ;\n  return;\n}\n3分","i18n_question_answer":"function sleep(ms) {\n  var start = Date.now(), expire = start + ms;\n  while (Date.now() < expire) ;\n  return;\n}\n3分","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971583519","question_title":"简述一下src与href的区别","i18n_question_title":"简述一下src与href的区别","question_skill_list":[{"name":"HTML","i18n_name":"HTML","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"描述一下html中的src与href的区别和使用场景是什么","i18n_question_description":"描述一下html中的src与href的区别和使用场景是什么","question_answer":"基本答案：src用于指向外部资源的位置替换当前元素，href用于在当前文档和引用资源之间确立联系。\n1.  src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；\n在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。\n<script src =\"js.js\"></script>\n浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。\n这也是为什么将js脚本放在底部而不是头部。\n \n1.  href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加\n<link href=\"common.css\" rel=\"stylesheet\"/>\n那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。\n这也是为什么建议使用link方式来加载css，而不是使用@import方式。\n1. 2.5分及以下：不能指出href和src的区别和使用场景\n2. 3.0分：能指出href和src的使用场景，答出基本答案\n3. 3.5分：能说清楚其中二者在资源引用时对页面的影响\n4. 4.0分：能能完整的说明href和src的区别，指出href在link标签中的使用，知道@import和link的区别并提供优化建议","i18n_question_answer":"基本答案：src用于指向外部资源的位置替换当前元素，href用于在当前文档和引用资源之间确立联系。\n1.  src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；\n在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。\n<script src =\"js.js\"></script>\n浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。\n这也是为什么将js脚本放在底部而不是头部。\n \n1.  href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加\n<link href=\"common.css\" rel=\"stylesheet\"/>\n那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。\n这也是为什么建议使用link方式来加载css，而不是使用@import方式。\n1. 2.5分及以下：不能指出href和src的区别和使用场景\n2. 3.0分：能指出href和src的使用场景，答出基本答案\n3. 3.5分：能说清楚其中二者在资源引用时对页面的影响\n4. 4.0分：能能完整的说明href和src的区别，指出href在link标签中的使用，知道@import和link的区别并提供优化建议","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445595297351204","question_title":"设计一道Js的range算法","i18n_question_title":"设计一道Js的range算法","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null},{"name":"算法","i18n_name":"算法","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"#### range是一些编程语言内置的功能:\n- 如range(1,10,3),返回 [1, 4, 7, 10];\n- 如range('A','F',2)，返回[\"A\", \"C\", \"E\"]\n请用Js实现该功能（可以使用ES6）","i18n_question_description":"#### range是一些编程语言内置的功能:\n- 如range(1,10,3),返回 [1, 4, 7, 10];\n- 如range('A','F',2)，返回[\"A\", \"C\", \"E\"]\n请用Js实现该功能（可以使用ES6）","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"var range = function(start, end, step) {\\n\"},{\"insert\":\" var range = [];\\n\"},{\"insert\":\" var typeofStart = typeof start;\\n\"},{\"insert\":\" var typeofEnd = typeof end;\\n\"},{\"insert\":\" if (step === 0) {\\n\"},{\"insert\":\" throw TypeError(\\\"Step cannot be zero.\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" if (typeofStart == \\\"undefined\\\" || typeofEnd == \\\"undefined\\\") {\\n\"},{\"insert\":\" throw TypeError(\\\"Must pass start and end arguments.\\\");\\n\"},{\"insert\":\" } else if (typeofStart != typeofEnd) {\\n\"},{\"insert\":\" throw TypeError(\\\"Start and end arguments must be of same type.\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" typeof step == \\\"undefined\\\" && (step = 1);\\n\"},{\"insert\":\" if (end < start) {\\n\"},{\"insert\":\" step = -step;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" if (typeofStart == \\\"number\\\") {\\n\"},{\"insert\":\" while (step > 0 ? end >= start : end <= start) {\\n\"},{\"insert\":\" range.push(start);\\n\"},{\"insert\":\" start += step;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else if (typeofStart == \\\"string\\\") {\\n\"},{\"insert\":\" if (start.length != 1 || end.length != 1) {\\n\"},{\"insert\":\" throw TypeError(\\\"Only strings with one character are supported.\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" start = start.charCodeAt(0);\\n\"},{\"insert\":\" end = end.charCodeAt(0);\\n\"},{\"insert\":\" while (step > 0 ? end >= start : end <= start) {\\n\"},{\"insert\":\" range.push(String.fromCharCode(start));\\n\"},{\"insert\":\" start += step;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" throw TypeError(\\\"Only string and number types are supported\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" return range;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没实现\\n\"},{\"insert\":\"2. 3.0分：能实现功能，但是代码不够优雅，逻辑有点复杂\\n\"},{\"insert\":\"3. 3.5分：不仅能实现功能，还能考虑边界，代码简洁优雅，能熟练使用ES6\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"var range = function(start, end, step) {\\n\"},{\"insert\":\" var range = [];\\n\"},{\"insert\":\" var typeofStart = typeof start;\\n\"},{\"insert\":\" var typeofEnd = typeof end;\\n\"},{\"insert\":\" if (step === 0) {\\n\"},{\"insert\":\" throw TypeError(\\\"Step cannot be zero.\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" if (typeofStart == \\\"undefined\\\" || typeofEnd == \\\"undefined\\\") {\\n\"},{\"insert\":\" throw TypeError(\\\"Must pass start and end arguments.\\\");\\n\"},{\"insert\":\" } else if (typeofStart != typeofEnd) {\\n\"},{\"insert\":\" throw TypeError(\\\"Start and end arguments must be of same type.\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" typeof step == \\\"undefined\\\" && (step = 1);\\n\"},{\"insert\":\" if (end < start) {\\n\"},{\"insert\":\" step = -step;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" if (typeofStart == \\\"number\\\") {\\n\"},{\"insert\":\" while (step > 0 ? end >= start : end <= start) {\\n\"},{\"insert\":\" range.push(start);\\n\"},{\"insert\":\" start += step;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else if (typeofStart == \\\"string\\\") {\\n\"},{\"insert\":\" if (start.length != 1 || end.length != 1) {\\n\"},{\"insert\":\" throw TypeError(\\\"Only strings with one character are supported.\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" start = start.charCodeAt(0);\\n\"},{\"insert\":\" end = end.charCodeAt(0);\\n\"},{\"insert\":\" while (step > 0 ? end >= start : end <= start) {\\n\"},{\"insert\":\" range.push(String.fromCharCode(start));\\n\"},{\"insert\":\" start += step;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" throw TypeError(\\\"Only string and number types are supported\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" return range;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没实现\\n\"},{\"insert\":\"2. 3.0分：能实现功能，但是代码不够优雅，逻辑有点复杂\\n\"},{\"insert\":\"3. 3.5分：不仅能实现功能，还能考虑边界，代码简洁优雅，能熟练使用ES6\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402307406093","question_title":"请简述什么是双向数据绑定和单向数据流，以及它们的区别","i18n_question_title":"请简述什么是双向数据绑定和单向数据流，以及它们的区别","question_skill_list":[{"name":"工程构建","i18n_name":"工程构建","nick_name":null,"description":null},{"name":"框架","i18n_name":"框架","nick_name":null,"description":null},{"name":"设计模式","i18n_name":"设计模式","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"什么是双向数据绑定和单向数据流，它们有什么不同？","i18n_question_description":"什么是双向数据绑定和单向数据流，它们有什么不同？","question_answer":"### 双向数据绑定\n双向数据绑定意味着UI动态地绑定到模型数据，这样当UI改变时，模型数据就随之变化，反之亦然。    \n### 单向数据流\n单向数据流意味着model是唯一来源。UI触发消息的变化，将用户行为标记为model。只有model具有访问更改应用程序状态的权限。其效果是数据总是朝一个方向流动，这使得理解起来更容易。    \n### 二者有什么优缺点\n单向数据流是确定性的，数据流动方向可以跟踪，流动单一，追查问题的时候可以跟快捷。缺点就是写起来不太方便。要使UI发生变更就必须创建各种action来维护对应的state  \n双向绑定，优点是使用方便，值和UI双绑定，但是由于各种数据相互依赖相互绑定，导致数据问题的源头难以被跟踪到，子组件修改父组件，兄弟组件互相修改有有违设计原则\n总分4分，了解各自的概念+1分，说出各自的优缺点+1","i18n_question_answer":"### 双向数据绑定\n双向数据绑定意味着UI动态地绑定到模型数据，这样当UI改变时，模型数据就随之变化，反之亦然。    \n### 单向数据流\n单向数据流意味着model是唯一来源。UI触发消息的变化，将用户行为标记为model。只有model具有访问更改应用程序状态的权限。其效果是数据总是朝一个方向流动，这使得理解起来更容易。    \n### 二者有什么优缺点\n单向数据流是确定性的，数据流动方向可以跟踪，流动单一，追查问题的时候可以跟快捷。缺点就是写起来不太方便。要使UI发生变更就必须创建各种action来维护对应的state  \n双向绑定，优点是使用方便，值和UI双绑定，但是由于各种数据相互依赖相互绑定，导致数据问题的源头难以被跟踪到，子组件修改父组件，兄弟组件互相修改有有违设计原则\n总分4分，了解各自的概念+1分，说出各自的优缺点+1","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308372749","question_title":"请用算法实现，从给定的无序、不重复的数组A中，取出N个数，使其相加和为M。并给出算法的时间/空间复杂度","i18n_question_title":"请用算法实现，从给定的无序、不重复的数组A中，取出N个数，使其相加和为M。并给出算法的时间/空间复杂度","question_skill_list":[{"name":"记忆化搜索","i18n_name":"记忆化搜索","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"经典的KSUM取数求和计算，可以考察对动态规划算法的掌握和使用度，","i18n_question_description":"经典的KSUM取数求和计算，可以考察对动态规划算法的掌握和使用度，","question_answer":null,"i18n_question_answer":null,"status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308110605","question_title":"请谈谈你对JS单线程以及setTimeout的理解","i18n_question_title":"请谈谈你对JS单线程以及setTimeout的理解","question_skill_list":[{"name":"语言基础","i18n_name":"语言基础","nick_name":null,"description":null},{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"```javascript\nsetTimeout(function() {\n\tsetTimeout(function() { console.log(1) }, 100)\n\tconsole.log(2)\n\tsetTimeout(function() { console.log(3) }, 0)\n}, 0)\nsetTimeout(function () {\n\tconsole.log(4)\n}, 100)\nconsole.log(5)\n```\n请说出上面代码的输出顺序以及原因？如果吧4改为101ms呢？","i18n_question_description":"```javascript\nsetTimeout(function() {\n\tsetTimeout(function() { console.log(1) }, 100)\n\tconsole.log(2)\n\tsetTimeout(function() { console.log(3) }, 0)\n}, 0)\nsetTimeout(function () {\n\tconsole.log(4)\n}, 100)\nconsole.log(5)\n```\n请说出上面代码的输出顺序以及原因？如果吧4改为101ms呢？","question_answer":"正确顺序为：5 2 3 4 1\n如果4改为101ms则执行顺序还是不变\n原因：\n1.  JS单线程\n2. setTimeout不在当前eventloop。且执行顺序依赖入队顺序。setTimeout 0是放入下一个loop的队尾\n3. 虽然4和1都是100ms延迟的标记，但是4先入队列。\n4. setTimeout的time是个标记，会在eventloop循环去检测，符合条件的执行，不符合条件的延后到下一个eventloop，这执行过程本身又有时间，因此尽管101>100，但是在一个执行周期内，他们都会被触发，4先入队所以不变\n1. 2.5分及以下：\n\t不知道JS单线程，不了解eventloop\n2. 3.0分：\n\t知道setTimeout不在当前eventloop而且执行顺序依赖入队顺序\n3. 3.5分：\n\t能正确说出顺序并解释\n4. 4.0分：\n\t正确解释setTimeout工作原理","i18n_question_answer":"正确顺序为：5 2 3 4 1\n如果4改为101ms则执行顺序还是不变\n原因：\n1.  JS单线程\n2. setTimeout不在当前eventloop。且执行顺序依赖入队顺序。setTimeout 0是放入下一个loop的队尾\n3. 虽然4和1都是100ms延迟的标记，但是4先入队列。\n4. setTimeout的time是个标记，会在eventloop循环去检测，符合条件的执行，不符合条件的延后到下一个eventloop，这执行过程本身又有时间，因此尽管101>100，但是在一个执行周期内，他们都会被触发，4先入队所以不变\n1. 2.5分及以下：\n\t不知道JS单线程，不了解eventloop\n2. 3.0分：\n\t知道setTimeout不在当前eventloop而且执行顺序依赖入队顺序\n3. 3.5分：\n\t能正确说出顺序并解释\n4. 4.0分：\n\t正确解释setTimeout工作原理","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308323597","question_title":"请谈谈你对Event Loop 的认识","i18n_question_title":"请谈谈你对Event Loop 的认识","question_skill_list":[{"name":"Node.js","i18n_name":"Node.js","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"如何理解 Event Loop ?","i18n_question_description":"如何理解 Event Loop ?","question_answer":null,"i18n_question_answer":null,"status_end_time":null,"assessment_create_time":null}],"BaseResp":{"StatusMessage":"SUCCESS","StatusCode":0,"Extra":null}},"message":"OK","special_case_code":0}
