{"code":0,"success":true,"data":{"has_more":true,"page_token":"YVsr9/ONAqP1yECxV4sGLLTCxkTkHHj9DwewIfexk7s=","assessments_list":[{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445596262565406","question_title":"不使用条件判断语句，输出格式化的时间","i18n_question_title":"不使用条件判断语句，输出格式化的时间","question_skill_list":[{"name":"编码","i18n_name":"编码","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"不使用条件判断语句（ 包括 if 和 ?: ），将当前时间格式化为`yyyy-MM-dd hh:mm:ss` 如：\n````\n1970-01-01 00:00:00\n2017-10-11 12:34:56\n```","i18n_question_description":"不使用条件判断语句（ 包括 if 和 ?: ），将当前时间格式化为`yyyy-MM-dd hh:mm:ss` 如：\n````\n1970-01-01 00:00:00\n2017-10-11 12:34:56\n```","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"给出一个可能的作答\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"function formatTime () {\\n\"},{\"insert\":\" var now = new Date();\\n\"},{\"insert\":\" return now.getFullYear() + '-' + ('00' + (now.getMonth()+1)).slice(-2) + '-' + ('00' + now.getDate()).slice(-2) + ' ' + ('00' + now.getHours()).slice(-2) + ':' + ('00' + now.getMinutes()).slice(-2) + ':' + ('00' + now.getSeconds()).slice(-2)\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"本题目满分5分\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"正确作答可得3分（存在题目答案以外的写法，可以随机应变）\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"其余均不得分。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"给出一个可能的作答\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"function formatTime () {\\n\"},{\"insert\":\" var now = new Date();\\n\"},{\"insert\":\" return now.getFullYear() + '-' + ('00' + (now.getMonth()+1)).slice(-2) + '-' + ('00' + now.getDate()).slice(-2) + ' ' + ('00' + now.getHours()).slice(-2) + ':' + ('00' + now.getMinutes()).slice(-2) + ':' + ('00' + now.getSeconds()).slice(-2)\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"本题目满分5分\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"正确作答可得3分（存在题目答案以外的写法，可以随机应变）\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"其余均不得分。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308503821","question_title":"请画出一次ajax请求中XMLHTTPRequest的状态流程图","i18n_question_title":"请画出一次ajax请求中XMLHTTPRequest的状态流程图","question_skill_list":[{"name":"AJAX","i18n_name":"AJAX","nick_name":null,"description":null},{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"1.  画出一次ajax请求中XMLHttpRequest的状态流程图，\n2.  要求包含ajax在各个阶段的配置信息项，状态判断和回调处理等信息","i18n_question_description":"1.  画出一次ajax请求中XMLHttpRequest的状态流程图，\n2.  要求包含ajax在各个阶段的配置信息项，状态判断和回调处理等信息","question_answer":"1.  new XMLHttpRequest =>  open => send=> readyState -> callback\n1.  能考虑xhr创建的兼容\n1.  能描述出open=>send=>readyState->callback的正确流程和处理方式\n1.  能理梳理清readyState和state的状态\n1.  能考虑到超时情况的请求中断与重试","i18n_question_answer":"1.  new XMLHttpRequest =>  open => send=> readyState -> callback\n1.  能考虑xhr创建的兼容\n1.  能描述出open=>send=>readyState->callback的正确流程和处理方式\n1.  能理梳理清readyState和state的状态\n1.  能考虑到超时情况的请求中断与重试","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308192525","question_title":"请谈谈你印象中的sass/less，postCSS和CSSmodule，他们之间的区别和联系分别是什么","i18n_question_title":"请谈谈你印象中的sass/less，postCSS和CSSmodule，他们之间的区别和联系分别是什么","question_skill_list":[{"name":"CSS预编译语言","i18n_name":"CSS预编译语言","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"聊聊你印象中的sass/less，postCSS和CSSmodule，区别和联系是什么","i18n_question_description":"聊聊你印象中的sass/less，postCSS和CSSmodule，区别和联系是什么","question_answer":null,"i18n_question_answer":null,"status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445596262598174","question_title":"JS编码实现简单的MVC","i18n_question_title":"JS编码实现简单的MVC","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null},{"name":"设计模式","i18n_name":"设计模式","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"编码实现简单的MVC，例如HH:mm:ss的展示","i18n_question_description":"编码实现简单的MVC，例如HH:mm:ss的展示","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"<html>\\n\"},{\"insert\":\" <head>\\n\"},{\"insert\":\" <title>简单MVC</title>\\n\"},{\"insert\":\" </head>\\n\"},{\"insert\":\" <body>\\n\"},{\"insert\":\" <span bind=\\\"hour\\\"></span> : <span bind=\\\"minute\\\"></span> : <span bind=\\\"second\\\"></span>\\n\"},{\"insert\":\" <script type=\\\"text/javascript\\\">\\n\"},{\"insert\":\" // 实现代码\\n\"},{\"insert\":\" function Model(value) {\\n\"},{\"insert\":\" this._value = typeof value === 'undefined' ? '' : value;\\n\"},{\"insert\":\" this._listeners = [];\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" Model.prototype.set = function(value) {\\n\"},{\"insert\":\" var self = this;\\n\"},{\"insert\":\" self._value = value;\\n\"},{\"insert\":\" setTimeout(function(){\\n\"},{\"insert\":\" self._listeners.forEach(function(listener) {\\n\"},{\"insert\":\" listener.call(self, value);\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" Model.prototype.watch = function(listener) {\\n\"},{\"insert\":\" this._listeners.push(listener);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" Model.prototype.bind = function(node) {\\n\"},{\"insert\":\" this.watch(function (value){\\n\"},{\"insert\":\" node.innerHTML = value;\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" function Controller(callback) {\\n\"},{\"insert\":\" var models = {};\\n\"},{\"insert\":\" var views = Array.prototype.slice.call(document.querySelectorAll('[bind]'), 0);\\n\"},{\"insert\":\" views.forEach(function(view) {\\n\"},{\"insert\":\" var modelName = view.getAttribute('bind');\\n\"},{\"insert\":\" (models[modelName] = models[modelName] || new Model()).bind(view);\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" callback.call(this, models);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" </script>\\n\"},{\"insert\":\" <script type=\\\"text/javascript\\\">\\n\"},{\"insert\":\" // 测试代码\\n\"},{\"insert\":\" (function(){\\n\"},{\"insert\":\" new Controller(function (models) {\\n\"},{\"insert\":\" function setTime() {\\n\"},{\"insert\":\" var date = new Date();\\n\"},{\"insert\":\" models.hour.set(date.getHours());\\n\"},{\"insert\":\" models.minute.set(date.getMinutes());\\n\"},{\"insert\":\" models.second.set(date.getSeconds());\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" setTime();\\n\"},{\"insert\":\" setInterval(setTime, 1000);\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" })();\\n\"},{\"insert\":\" </script>\\n\"},{\"insert\":\" </body>\\n\"},{\"insert\":\"</html>\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有思路\\n\"},{\"insert\":\"2. 3.0分：可以写出基本的观察者模式，抽象M和V的映射关系\\n\"},{\"insert\":\"3. 3.5分：满足3分的基础上，可以抽象出Controller层\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"<html>\\n\"},{\"insert\":\" <head>\\n\"},{\"insert\":\" <title>简单MVC</title>\\n\"},{\"insert\":\" </head>\\n\"},{\"insert\":\" <body>\\n\"},{\"insert\":\" <span bind=\\\"hour\\\"></span> : <span bind=\\\"minute\\\"></span> : <span bind=\\\"second\\\"></span>\\n\"},{\"insert\":\" <script type=\\\"text/javascript\\\">\\n\"},{\"insert\":\" // 实现代码\\n\"},{\"insert\":\" function Model(value) {\\n\"},{\"insert\":\" this._value = typeof value === 'undefined' ? '' : value;\\n\"},{\"insert\":\" this._listeners = [];\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" Model.prototype.set = function(value) {\\n\"},{\"insert\":\" var self = this;\\n\"},{\"insert\":\" self._value = value;\\n\"},{\"insert\":\" setTimeout(function(){\\n\"},{\"insert\":\" self._listeners.forEach(function(listener) {\\n\"},{\"insert\":\" listener.call(self, value);\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" Model.prototype.watch = function(listener) {\\n\"},{\"insert\":\" this._listeners.push(listener);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" Model.prototype.bind = function(node) {\\n\"},{\"insert\":\" this.watch(function (value){\\n\"},{\"insert\":\" node.innerHTML = value;\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" function Controller(callback) {\\n\"},{\"insert\":\" var models = {};\\n\"},{\"insert\":\" var views = Array.prototype.slice.call(document.querySelectorAll('[bind]'), 0);\\n\"},{\"insert\":\" views.forEach(function(view) {\\n\"},{\"insert\":\" var modelName = view.getAttribute('bind');\\n\"},{\"insert\":\" (models[modelName] = models[modelName] || new Model()).bind(view);\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" callback.call(this, models);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" </script>\\n\"},{\"insert\":\" <script type=\\\"text/javascript\\\">\\n\"},{\"insert\":\" // 测试代码\\n\"},{\"insert\":\" (function(){\\n\"},{\"insert\":\" new Controller(function (models) {\\n\"},{\"insert\":\" function setTime() {\\n\"},{\"insert\":\" var date = new Date();\\n\"},{\"insert\":\" models.hour.set(date.getHours());\\n\"},{\"insert\":\" models.minute.set(date.getMinutes());\\n\"},{\"insert\":\" models.second.set(date.getSeconds());\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" setTime();\\n\"},{\"insert\":\" setInterval(setTime, 1000);\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" })();\\n\"},{\"insert\":\" </script>\\n\"},{\"insert\":\" </body>\\n\"},{\"insert\":\"</html>\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有思路\\n\"},{\"insert\":\"2. 3.0分：可以写出基本的观察者模式，抽象M和V的映射关系\\n\"},{\"insert\":\"3. 3.5分：满足3分的基础上，可以抽象出Controller层\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971763743","question_title":"setTimeout 和 Promise","i18n_question_title":"setTimeout 和 Promise","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"请写出程序的输出内容\nsetTimeout(function() {\n\t console.log(1)\n}, 0);\nnew Promise(function(resolve) {\n\t console.log(2);\n\t for(var i=0 ; i < 10000 ; i++) {\n\t\t\t if (i == 9999) {\n\t\t\t\t\t resolve();\n\t\t\t }\n\t }\n\t console.log(3);\n}).then(function() {\n\t console.log(4);\n});\nconsole.log(5);","i18n_question_description":"请写出程序的输出内容\nsetTimeout(function() {\n\t console.log(1)\n}, 0);\nnew Promise(function(resolve) {\n\t console.log(2);\n\t for(var i=0 ; i < 10000 ; i++) {\n\t\t\t if (i == 9999) {\n\t\t\t\t\t resolve();\n\t\t\t }\n\t }\n\t console.log(3);\n}).then(function() {\n\t console.log(4);\n});\nconsole.log(5);","question_answer":"正确答案：2 3 5 4 1。重点关注：候选人是否把 2 写在第一位，以及 4 和 1 的顺序。\n回答错误 2 分\n回答正确 2.5 分","i18n_question_answer":"正确答案：2 3 5 4 1。重点关注：候选人是否把 2 写在第一位，以及 4 和 1 的顺序。\n回答错误 2 分\n回答正确 2.5 分","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402307127565","question_title":"请创建一个长度为100的数组，在里面存入[0,1,2,...,99]","i18n_question_title":"请创建一个长度为100的数组，在里面存入[0,1,2,...,99]","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"如题。\n（1）先让应聘者写出自己的答案。\n（2）再追加一个问题：这样写行不行？\nnew Array(100).map((_, i) => i);\n（3）为什么不行？","i18n_question_description":"如题。\n（1）先让应聘者写出自己的答案。\n（2）再追加一个问题：这样写行不行？\nnew Array(100).map((_, i) => i);\n（3）为什么不行？","question_answer":"答案 1\nconst arr = [...Array(100)].map((_, i) => i);\n答案 2\nArray.from({ length: 100 }, (_, i) => i)\n答案 3\nArray(100).fill().map((_, i) => i)\n主要考察：\nArray API 的使用\n对 Array 类型本质的了解\nES6 展开操作符的使用\n评分标准：\n2.5：完全写不出来。\n3：写出以上答案中的一种，并能答对第二个问题。\n3.5 能说出 new Array(100) 创建的是一个空数组，本质上是对象 {length: 100}，没有可用于遍历的元素。","i18n_question_answer":"答案 1\nconst arr = [...Array(100)].map((_, i) => i);\n答案 2\nArray.from({ length: 100 }, (_, i) => i)\n答案 3\nArray(100).fill().map((_, i) => i)\n主要考察：\nArray API 的使用\n对 Array 类型本质的了解\nES6 展开操作符的使用\n评分标准：\n2.5：完全写不出来。\n3：写出以上答案中的一种，并能答对第二个问题。\n3.5 能说出 new Array(100) 创建的是一个空数组，本质上是对象 {length: 100}，没有可用于遍历的元素。","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255972009503","question_title":"弹性盒子中 flex: 0 1 auto 表示什么意思？","i18n_question_title":"弹性盒子中 flex: 0 1 auto 表示什么意思？","question_skill_list":[{"name":"CSS","i18n_name":"CSS","nick_name":null,"description":null}],"score":null,"content":null,"question_description":null,"i18n_question_description":null,"question_answer":"flex-grow: 0; 增长比例，子项合计宽度小于容器宽度，需要根据每个子项设置的此属性比例对剩下的长度进行分配\nflex-shrink: 1; 回缩比例，子项合计宽度大于容器宽度，需要根据每个子项设置的此属性比例对多出的长度进行分配\nflex-basis: auto; 设置了宽度跟宽度走，没设置宽度跟内容实际宽度走","i18n_question_answer":"flex-grow: 0; 增长比例，子项合计宽度小于容器宽度，需要根据每个子项设置的此属性比例对剩下的长度进行分配\nflex-shrink: 1; 回缩比例，子项合计宽度大于容器宽度，需要根据每个子项设置的此属性比例对多出的长度进行分配\nflex-basis: auto; 设置了宽度跟宽度走，没设置宽度跟内容实际宽度走","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445585932617252","question_title":"数字格式化问题:1234567890 --> 1,234,567,890","i18n_question_title":"数字格式化问题:1234567890 --> 1,234,567,890","question_skill_list":[{"name":"数字格式化","i18n_name":"数字格式化","nick_name":null,"description":null},{"name":"编码","i18n_name":"编码","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"数字格式化问题,将1234567890 --> 1,234,567,890","i18n_question_description":"数字格式化问题,将1234567890 --> 1,234,567,890","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"非正则实现\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"let test = '1234567890'\\n\"},{\"insert\":\"function formatCash(str) {\\n\"},{\"insert\":\" let arr = []\\n\"},{\"insert\":\" for (let i = 1; i < str.length; i++) {\\n\"},{\"insert\":\" if (str.length % 3 && i == 1)\\n\"},{\"insert\":\" arr.push(str.substr(0, str.length % 3))\\n\"},{\"insert\":\" if (i % 3 === 0)\\n\"},{\"insert\":\" arr.push(str.substr(i - 2, 3))\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" return arr.join(',')\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"console.log(formatCash(test)) // 1,234,567,890\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"正则实现\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"let test1 = '1234567890'\\n\"},{\"insert\":\"let format = test1.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, ',')\\n\"},{\"insert\":\"console.log(format) // 1,234,567,890\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：完全没思路，不知道如何进行字符串拆解\\n\"},{\"insert\":\"2. 3.0分：能通过字符串拆解和遍历完成基本功能实现，能想到str.length % 3 && i == 1进行基本边界判断\\n\"},{\"insert\":\"3. 3.5分：能实现到arr.push(str.substr(0, str.length % 3))和arr.push(str.substr(i - 2, 3))，完成基本转换并且返回：return arr.join(',')\\n\"},{\"insert\":\"4. 4.0分：能用 test1.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, ',')进行很快的匹配，思路清晰无bug\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"非正则实现\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"let test = '1234567890'\\n\"},{\"insert\":\"function formatCash(str) {\\n\"},{\"insert\":\" let arr = []\\n\"},{\"insert\":\" for (let i = 1; i < str.length; i++) {\\n\"},{\"insert\":\" if (str.length % 3 && i == 1)\\n\"},{\"insert\":\" arr.push(str.substr(0, str.length % 3))\\n\"},{\"insert\":\" if (i % 3 === 0)\\n\"},{\"insert\":\" arr.push(str.substr(i - 2, 3))\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" return arr.join(',')\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"console.log(formatCash(test)) // 1,234,567,890\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"正则实现\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"let test1 = '1234567890'\\n\"},{\"insert\":\"let format = test1.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, ',')\\n\"},{\"insert\":\"console.log(format) // 1,234,567,890\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：完全没思路，不知道如何进行字符串拆解\\n\"},{\"insert\":\"2. 3.0分：能通过字符串拆解和遍历完成基本功能实现，能想到str.length % 3 && i == 1进行基本边界判断\\n\"},{\"insert\":\"3. 3.5分：能实现到arr.push(str.substr(0, str.length % 3))和arr.push(str.substr(i - 2, 3))，完成基本转换并且返回：return arr.join(',')\\n\"},{\"insert\":\"4. 4.0分：能用 test1.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, ',')进行很快的匹配，思路清晰无bug\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239904663047","question_title":"文档流执行顺序考察","i18n_question_title":"文档流执行顺序考察","question_skill_list":[{"name":"HTML","i18n_name":"HTML","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"```html\n <script type=\"text/javascript\" src='1.js' ></script>\n <script>\n\tconsole.log('2');\n </script>\n ```\n1.js里面只有一句话:console.log('1');  \n1.js被服务器handle在那里30秒不释放，请问先看到1还是2","i18n_question_description":"```html\n <script type=\"text/javascript\" src='1.js' ></script>\n <script>\n\tconsole.log('2');\n </script>\n ```\n1.js里面只有一句话:console.log('1');  \n1.js被服务器handle在那里30秒不释放，请问先看到1还是2","question_answer":"先看到1,再看到2，因为页面文档流顺序执行\n答案正确 3 分","i18n_question_answer":"先看到1,再看到2，因为页面文档流顺序执行\n答案正确 3 分","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239917016612","question_title":"评价一下三种方法实现继承的优缺点,并改进","i18n_question_title":"评价一下三种方法实现继承的优缺点,并改进","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"代码如下：\n```js\nfunction Shape() {}\nfunction Rect() {}\n// 方法1\nRect.prototype = new Shape();\n// 方法2\nRect.prototype = Shape.prototype;\n// 方法3\nRect.prototype = Object.create(Shape.prototype);\nRect.prototype.area = function () {\n  // do something\n};\n```","i18n_question_description":"代码如下：\n```js\nfunction Shape() {}\nfunction Rect() {}\n// 方法1\nRect.prototype = new Shape();\n// 方法2\nRect.prototype = Shape.prototype;\n// 方法3\nRect.prototype = Object.create(Shape.prototype);\nRect.prototype.area = function () {\n  // do something\n};\n```","question_answer":"参考答案：\n方法1：\n优点：正确设置原型链实现继承\n优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值\n缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改\n缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置\n总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化\n方法2：\n优点：正确设置原型链实现继承\n缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类\n方法3：\n优点：正确设置原型链且避免方法1.2中的缺点\n缺点：ES5方法需要注意兼容性\n改进：\n1. 所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化\n```\nfunction Rect() {\n    Shape.call(this);\n}\n```\n2. 用新创建的对象替代子类默认原型，设置Rect.prototype.constructor = Rect;保证一致性\n3. 第三种方法的polyfill：\n```\nfunction create(obj) {\n    if (Object.create) {\n        return Object.create(obj);\n    }\n    function f() {};\n    f.prototype = obj;\n    return new f();\n}\n```\n1. 2.5分及以下：没有继承相关概念\n2. 3.0分：能基本回答该问题\n3. 3.5分：详细的回答该问题，列出优缺和改进点\n4. 4.0分：","i18n_question_answer":"参考答案：\n方法1：\n优点：正确设置原型链实现继承\n优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值\n缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改\n缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置\n总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化\n方法2：\n优点：正确设置原型链实现继承\n缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类\n方法3：\n优点：正确设置原型链且避免方法1.2中的缺点\n缺点：ES5方法需要注意兼容性\n改进：\n1. 所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化\n```\nfunction Rect() {\n    Shape.call(this);\n}\n```\n2. 用新创建的对象替代子类默认原型，设置Rect.prototype.constructor = Rect;保证一致性\n3. 第三种方法的polyfill：\n```\nfunction create(obj) {\n    if (Object.create) {\n        return Object.create(obj);\n    }\n    function f() {};\n    f.prototype = obj;\n    return new f();\n}\n```\n1. 2.5分及以下：没有继承相关概念\n2. 3.0分：能基本回答该问题\n3. 3.5分：详细的回答该问题，列出优缺和改进点\n4. 4.0分：","status_end_time":null,"assessment_create_time":null}],"BaseResp":{"StatusMessage":"SUCCESS","StatusCode":0,"Extra":null}},"message":"OK","special_case_code":0}
