{"code":0,"success":true,"data":{"has_more":true,"page_token":"+WoSsWIpvNmGPXEScqp9RJN749mGm8lrLKYK1xYze/Y=","assessments_list":[{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445596262778398","question_title":"用 IIFE 模式实现一个模块（对象）","i18n_question_title":"用 IIFE 模式实现一个模块（对象）","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"用 IIFE 模式实现一个模块（对象），要求实现包含私有属性、公有属性、私有方法、公有方法内容。\n```javascript\nvar myModule = function(){\n    // 补全代码\n}();\n```","i18n_question_description":"用 IIFE 模式实现一个模块（对象），要求实现包含私有属性、公有属性、私有方法、公有方法内容。\n```javascript\nvar myModule = function(){\n    // 补全代码\n}();\n```","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"var myModule = function(){\\n\"},{\"insert\":\" //私有属性\\n\"},{\"insert\":\" var name = \\\"donyell\\\";\\n\"},{\"insert\":\" //私有方法\\n\"},{\"insert\":\" var speak = function(){\\n\"},{\"insert\":\" console.log(\\\"my name is \\\" + name);\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\" //公有属性\\n\"},{\"insert\":\" var familyName = \\\"wang\\\";\\n\"},{\"insert\":\" \\n\"},{\"insert\":\" return {\\n\"},{\"insert\":\" print:speak, //公有方法\\n\"},{\"insert\":\" familyName:familyName //公有属性\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"}();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有js模块封装的概念，不知道IIFE的意思\\n\"},{\"insert\":\"2. 3.0分：能基本完成模块的封装，知道如何实现私有属性和私有方法\\n\"},{\"insert\":\"3. 3.5分：知道js中如何模拟共有属性和私有属性，知道如何通过返回对象模拟公有属性和方法\\n\"},{\"insert\":\"4. 4.0分：能很快实现对应的功能，并且能举一反三提到amd，umd和es6 moudle的模块封装原理。\\n\"},{\"insert\":\"补充说明：\\n\"},{\"insert\":\"实现IIFE（立即执行函数表达式）模式。（权重4分）\\n\"},{\"insert\":\"实现私有属性（权重1分）、公有属性（权重1分）、私有方法（权重1分）、公有方法（权重1分）。\\n\"},{\"insert\":\"完整实现全部功能（权重2分）。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"var myModule = function(){\\n\"},{\"insert\":\" //私有属性\\n\"},{\"insert\":\" var name = \\\"donyell\\\";\\n\"},{\"insert\":\" //私有方法\\n\"},{\"insert\":\" var speak = function(){\\n\"},{\"insert\":\" console.log(\\\"my name is \\\" + name);\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\" //公有属性\\n\"},{\"insert\":\" var familyName = \\\"wang\\\";\\n\"},{\"insert\":\" \\n\"},{\"insert\":\" return {\\n\"},{\"insert\":\" print:speak, //公有方法\\n\"},{\"insert\":\" familyName:familyName //公有属性\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"}();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有js模块封装的概念，不知道IIFE的意思\\n\"},{\"insert\":\"2. 3.0分：能基本完成模块的封装，知道如何实现私有属性和私有方法\\n\"},{\"insert\":\"3. 3.5分：知道js中如何模拟共有属性和私有属性，知道如何通过返回对象模拟公有属性和方法\\n\"},{\"insert\":\"4. 4.0分：能很快实现对应的功能，并且能举一反三提到amd，umd和es6 moudle的模块封装原理。\\n\"},{\"insert\":\"补充说明：\\n\"},{\"insert\":\"实现IIFE（立即执行函数表达式）模式。（权重4分）\\n\"},{\"insert\":\"实现私有属性（权重1分）、公有属性（权重1分）、私有方法（权重1分）、公有方法（权重1分）。\\n\"},{\"insert\":\"完整实现全部功能（权重2分）。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971550751","question_title":"forced synchronous layouts","i18n_question_title":"forced synchronous layouts","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"有一组 DOM 元素，需要将其其高度设为与宽度一致，以下代码是否有问题，如何改造：\n```javascript\nfor(var i = 0,len = divs.length; i<len; i++){\n    var width = divs[i].clientWidth;\n    divs[i].style.height = width + 'px';\n}\n```","i18n_question_description":"有一组 DOM 元素，需要将其其高度设为与宽度一致，以下代码是否有问题，如何改造：\n```javascript\nfor(var i = 0,len = divs.length; i<len; i++){\n    var width = divs[i].clientWidth;\n    divs[i].style.height = width + 'px';\n}\n```","question_answer":"```javascript\nvar widthArray = [];\nfor(var i = 0, len = divs.length; i<len; i++){\n    var width = divs[i].clientWidth;\n    widthArray.push(width);\n}\nfor(var i = 0, len = divs.length; i<len; i++){\n    divs[i].style.height = widthArray[i] + 'px';\n}\n```\n读写分离，避免 forced synchronous layouts 引发的多次 reflow 。更多可以参考：\n\n1. 2.5分及以下：\n2. 3.0分：改写正确，能提到减少不必要的 reflow\n3. 3.5分：知道 forced synchronous layouts 的概念和原理\n4. 4.0分：","i18n_question_answer":"```javascript\nvar widthArray = [];\nfor(var i = 0, len = divs.length; i<len; i++){\n    var width = divs[i].clientWidth;\n    widthArray.push(width);\n}\nfor(var i = 0, len = divs.length; i<len; i++){\n    divs[i].style.height = widthArray[i] + 'px';\n}\n```\n读写分离，避免 forced synchronous layouts 引发的多次 reflow 。更多可以参考：\n\n1. 2.5分及以下：\n2. 3.0分：改写正确，能提到减少不必要的 reflow\n3. 3.5分：知道 forced synchronous layouts 的概念和原理\n4. 4.0分：","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445585932584484","question_title":"模拟js数组中的reduce和reduceRight方法","i18n_question_title":"模拟js数组中的reduce和reduceRight方法","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"模拟js的数组函数中的reduce方法，再通过少许修改实现reduceRight，已知代码如下：\n```javascript\nif (!Array.prototype.reduce) {\n  Array.prototype.reduce = function (fun /*, initialValue */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n    // 补全代码...\n}\n```","i18n_question_description":"模拟js的数组函数中的reduce方法，再通过少许修改实现reduceRight，已知代码如下：\n```javascript\nif (!Array.prototype.reduce) {\n  Array.prototype.reduce = function (fun /*, initialValue */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n    // 补全代码...\n}\n```","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"具体实现参考：\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"// ES5 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )\\n\"},{\"insert\":\"// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce\\n\"},{\"insert\":\"if (!Array.prototype.reduce) {\\n\"},{\"insert\":\" Array.prototype.reduce = function (fun /*, initialValue */) {\\n\"},{\"insert\":\" if (this === void 0 || this === null) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var t = Object(this);\\n\"},{\"insert\":\" var len = t.length >>> 0;\\n\"},{\"insert\":\" if (typeof fun !== \\\"function\\\") { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // no value to return if no initial value and an empty array\\n\"},{\"insert\":\" if (len === 0 && arguments.length === 1) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var k = 0;\\n\"},{\"insert\":\" var accumulator;\\n\"},{\"insert\":\" if (arguments.length >= 2) {\\n\"},{\"insert\":\" accumulator = arguments[1];\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" do {\\n\"},{\"insert\":\" if (k in t) {\\n\"},{\"insert\":\" accumulator = t[k++];\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // if array contains no values, no initial value to return\\n\"},{\"insert\":\" if (++k >= len) { throw TypeError(); }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" while (true);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" while (k < len) {\\n\"},{\"insert\":\" if (k in t) {\\n\"},{\"insert\":\" accumulator = fun.call(undefined, accumulator, t[k], k, t);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" k++;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return accumulator;\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// ES5 15.4.4.22 Array.prototype.reduceRight ( callbackfn [, initialValue ] )\\n\"},{\"insert\":\"// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/ReduceRight\\n\"},{\"insert\":\"if (!Array.prototype.reduceRight) {\\n\"},{\"insert\":\" Array.prototype.reduceRight = function (callbackfn /*, initialValue */) {\\n\"},{\"insert\":\" if (this === void 0 || this === null) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var t = Object(this);\\n\"},{\"insert\":\" var len = t.length >>> 0;\\n\"},{\"insert\":\" if (typeof callbackfn !== \\\"function\\\") { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // no value to return if no initial value, empty array\\n\"},{\"insert\":\" if (len === 0 && arguments.length === 1) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var k = len - 1;\\n\"},{\"insert\":\" var accumulator;\\n\"},{\"insert\":\" if (arguments.length >= 2) {\\n\"},{\"insert\":\" accumulator = arguments[1];\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" do {\\n\"},{\"insert\":\" if (k in this) {\\n\"},{\"insert\":\" accumulator = this[k--];\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // if array contains no values, no initial value to return\\n\"},{\"insert\":\" if (--k < 0) { throw TypeError(); }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" while (true);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" while (k >= 0) {\\n\"},{\"insert\":\" if (k in t) {\\n\"},{\"insert\":\" accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" k--;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return accumulator;\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：不知道reduce和reduceRight的大致用法，没有使用过\\n\"},{\"insert\":\"2. 3.0分：能知道reduce的大致用法，知道对数组中的所有元素调用指定的回调函数。该回调函数的返回值为累积结果，并且此返回值在下一次调用该回调函数时作为参数提供，能大致完成数组值的遍历情况\\n\"},{\"insert\":\"3. 3.5分：知道使用递归的方式进行取值判断，跳出条件判断清晰，能实现accumulator = t[k++];和accumulator = fun.call(undefined, accumulator, t[k], k, t);等关键步骤\\n\"},{\"insert\":\"4. 4.0分：能很清楚的表达reduce和reduceRight的用法和模拟过程，能利用递归判断写出函数计算和数值传参，知道通过改变遍历条件和索引值的方向(k--;)来实现reduceRight。\\n\"},{\"insert\":\"本题实现有一定的难度，可以酌情给分\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"具体实现参考：\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"// ES5 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )\\n\"},{\"insert\":\"// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce\\n\"},{\"insert\":\"if (!Array.prototype.reduce) {\\n\"},{\"insert\":\" Array.prototype.reduce = function (fun /*, initialValue */) {\\n\"},{\"insert\":\" if (this === void 0 || this === null) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var t = Object(this);\\n\"},{\"insert\":\" var len = t.length >>> 0;\\n\"},{\"insert\":\" if (typeof fun !== \\\"function\\\") { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // no value to return if no initial value and an empty array\\n\"},{\"insert\":\" if (len === 0 && arguments.length === 1) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var k = 0;\\n\"},{\"insert\":\" var accumulator;\\n\"},{\"insert\":\" if (arguments.length >= 2) {\\n\"},{\"insert\":\" accumulator = arguments[1];\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" do {\\n\"},{\"insert\":\" if (k in t) {\\n\"},{\"insert\":\" accumulator = t[k++];\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // if array contains no values, no initial value to return\\n\"},{\"insert\":\" if (++k >= len) { throw TypeError(); }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" while (true);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" while (k < len) {\\n\"},{\"insert\":\" if (k in t) {\\n\"},{\"insert\":\" accumulator = fun.call(undefined, accumulator, t[k], k, t);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" k++;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return accumulator;\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// ES5 15.4.4.22 Array.prototype.reduceRight ( callbackfn [, initialValue ] )\\n\"},{\"insert\":\"// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/ReduceRight\\n\"},{\"insert\":\"if (!Array.prototype.reduceRight) {\\n\"},{\"insert\":\" Array.prototype.reduceRight = function (callbackfn /*, initialValue */) {\\n\"},{\"insert\":\" if (this === void 0 || this === null) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var t = Object(this);\\n\"},{\"insert\":\" var len = t.length >>> 0;\\n\"},{\"insert\":\" if (typeof callbackfn !== \\\"function\\\") { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // no value to return if no initial value, empty array\\n\"},{\"insert\":\" if (len === 0 && arguments.length === 1) { throw TypeError(); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var k = len - 1;\\n\"},{\"insert\":\" var accumulator;\\n\"},{\"insert\":\" if (arguments.length >= 2) {\\n\"},{\"insert\":\" accumulator = arguments[1];\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" do {\\n\"},{\"insert\":\" if (k in this) {\\n\"},{\"insert\":\" accumulator = this[k--];\\n\"},{\"insert\":\" break;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // if array contains no values, no initial value to return\\n\"},{\"insert\":\" if (--k < 0) { throw TypeError(); }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" while (true);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" while (k >= 0) {\\n\"},{\"insert\":\" if (k in t) {\\n\"},{\"insert\":\" accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" k--;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return accumulator;\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：不知道reduce和reduceRight的大致用法，没有使用过\\n\"},{\"insert\":\"2. 3.0分：能知道reduce的大致用法，知道对数组中的所有元素调用指定的回调函数。该回调函数的返回值为累积结果，并且此返回值在下一次调用该回调函数时作为参数提供，能大致完成数组值的遍历情况\\n\"},{\"insert\":\"3. 3.5分：知道使用递归的方式进行取值判断，跳出条件判断清晰，能实现accumulator = t[k++];和accumulator = fun.call(undefined, accumulator, t[k], k, t);等关键步骤\\n\"},{\"insert\":\"4. 4.0分：能很清楚的表达reduce和reduceRight的用法和模拟过程，能利用递归判断写出函数计算和数值传参，知道通过改变遍历条件和索引值的方向(k--;)来实现reduceRight。\\n\"},{\"insert\":\"本题实现有一定的难度，可以酌情给分\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445585932895780","question_title":"写一个加法函数(sum)，使他可以同时支持sum(x,y)和sum(x)(y)两种调用方式。","i18n_question_title":"写一个加法函数(sum)，使他可以同时支持sum(x,y)和sum(x)(y)两种调用方式。","question_skill_list":[{"name":"柯里化","i18n_name":"柯里化","nick_name":null,"description":null},{"name":"函数式","i18n_name":"函数式","nick_name":null,"description":null},{"name":"编码","i18n_name":"编码","nick_name":null,"description":null},{"name":"闭包","i18n_name":"闭包","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"写一个按照下面两种方式都能正常调用的 sum 方法\n```javascript\nconsole.log(sum(2,3)); // 输出5\nconsole.log(sum(2)(3)); // 输出5\n```","i18n_question_description":"写一个按照下面两种方式都能正常调用的 sum 方法\n```javascript\nconsole.log(sum(2,3)); // 输出5\nconsole.log(sum(2)(3)); // 输出5\n```","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"方法一\\n\"},{\"insert\":\"function sum(a,b){\\n\"},{\"insert\":\"if(b) {\\n\"},{\"insert\":\"return a+b\\n\"},{\"insert\":\"}else{\\n\"},{\"insert\":\"return function(c){\\n\"},{\"insert\":\"return a+c\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"方法二\\n\"},{\"insert\":\"function sum(){\\n\"},{\"insert\":\"var arg=arguments\\n\"},{\"insert\":\"if(arg.length==2) {\\n\"},{\"insert\":\"return arg[0]+arg[1];\\n\"},{\"insert\":\"}else{\\n\"},{\"insert\":\"return function(c){\\n\"},{\"insert\":\"return arg[0]+c\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"若能写出任一实现，3分, 如果再能说清楚高阶函数、偏函数，则3+分。\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"方法一\\n\"},{\"insert\":\"function sum(a,b){\\n\"},{\"insert\":\"if(b) {\\n\"},{\"insert\":\"return a+b\\n\"},{\"insert\":\"}else{\\n\"},{\"insert\":\"return function(c){\\n\"},{\"insert\":\"return a+c\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"方法二\\n\"},{\"insert\":\"function sum(){\\n\"},{\"insert\":\"var arg=arguments\\n\"},{\"insert\":\"if(arg.length==2) {\\n\"},{\"insert\":\"return arg[0]+arg[1];\\n\"},{\"insert\":\"}else{\\n\"},{\"insert\":\"return function(c){\\n\"},{\"insert\":\"return arg[0]+c\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"若能写出任一实现，3分, 如果再能说清楚高阶函数、偏函数，则3+分。\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239916901924","question_title":"判断一个请求是否是ajax","i18n_question_title":"判断一个请求是否是ajax","question_skill_list":[{"name":"HTML","i18n_name":"HTML","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"后端如何判断一条请求是否是ajax?","i18n_question_description":"后端如何判断一条请求是否是ajax?","question_answer":"使用 http头 X-Request-With\n可以再追问一些使用http头的场景\n比如浏览器如何判断返回的是html和图片(Content-Type)  如何判断请求应该返回json还是html(Accept)\n1. 2.5分及以下：\n不知道\n2. 3.0分：\n可以推断出使用请求头\n3. 3.5分：\n明确知道常用的请求头都是用来做什么的","i18n_question_answer":"使用 http头 X-Request-With\n可以再追问一些使用http头的场景\n比如浏览器如何判断返回的是html和图片(Content-Type)  如何判断请求应该返回json还是html(Accept)\n1. 2.5分及以下：\n不知道\n2. 3.0分：\n可以推断出使用请求头\n3. 3.5分：\n明确知道常用的请求头都是用来做什么的","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402307111181","question_title":"请使用发布—订阅模式实现一个全局的 Event 对象来实现","i18n_question_title":"请使用发布—订阅模式实现一个全局的 Event 对象来实现","question_skill_list":[{"name":"设计模式","i18n_name":"设计模式","nick_name":null,"description":null}],"score":null,"content":null,"question_description":null,"i18n_question_description":null,"question_answer":null,"i18n_question_answer":null,"status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445585932518948","question_title":"用promise封装ajax对象","i18n_question_title":"用promise封装ajax对象","question_skill_list":[{"name":"AJAX","i18n_name":"AJAX","nick_name":null,"description":null},{"name":"编码","i18n_name":"编码","nick_name":null,"description":null},{"name":"promise","i18n_name":"promise","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"用promise封装ajax对象，实现函数fetch(url).then(res => console.log(res));","i18n_question_description":"用promise封装ajax对象，实现函数fetch(url).then(res => console.log(res));","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"function fetch(url) {\\n\"},{\"insert\":\" return new Promise(function(resolve, reject) {\\n\"},{\"insert\":\" var XHR = new XMLHttpRequest();\\n\"},{\"insert\":\" XHR.open('GET', url, true);\\n\"},{\"insert\":\" XHR.send();\\n\"},{\"insert\":\" XHR.onreadystatechange = function() {\\n\"},{\"insert\":\" if (XHR.readyState == 4) {\\n\"},{\"insert\":\" if (XHR.status == 200) {\\n\"},{\"insert\":\" try {\\n\"},{\"insert\":\" var response = JSON.parse(XHR.responseText);\\n\"},{\"insert\":\" resolve(response);\\n\"},{\"insert\":\" } catch (e) {\\n\"},{\"insert\":\" reject(e);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" reject(new Error(XHR.statusText));\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" })\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：不知道promise为何物，不知道promise的基本api和用法，不晓得原生api的书写规范\\n\"},{\"insert\":\"2. 3.0分：知道使用new XMLHttpRequest()创建原生xhr，知道使用new Promise(function(resolve, reject)的方式封装xhr对象，知道如何处理XHR.readyState === 4 和 XHR.status === 200的情况才能返回responseText\\n\"},{\"insert\":\"3. 3.5分：能考虑到var response = JSON.parse(XHR.responseText)转换text变json，知道搭配try catch对应resolve和reject\\n\"},{\"insert\":\"4. 4.0分：能很快实现xhr+promise，基本实现无错误，知道各种出错的状态码和边界条件，知道通过xhr.abort()的方式取消当次请求。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"function fetch(url) {\\n\"},{\"insert\":\" return new Promise(function(resolve, reject) {\\n\"},{\"insert\":\" var XHR = new XMLHttpRequest();\\n\"},{\"insert\":\" XHR.open('GET', url, true);\\n\"},{\"insert\":\" XHR.send();\\n\"},{\"insert\":\" XHR.onreadystatechange = function() {\\n\"},{\"insert\":\" if (XHR.readyState == 4) {\\n\"},{\"insert\":\" if (XHR.status == 200) {\\n\"},{\"insert\":\" try {\\n\"},{\"insert\":\" var response = JSON.parse(XHR.responseText);\\n\"},{\"insert\":\" resolve(response);\\n\"},{\"insert\":\" } catch (e) {\\n\"},{\"insert\":\" reject(e);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" } else {\\n\"},{\"insert\":\" reject(new Error(XHR.statusText));\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" })\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：不知道promise为何物，不知道promise的基本api和用法，不晓得原生api的书写规范\\n\"},{\"insert\":\"2. 3.0分：知道使用new XMLHttpRequest()创建原生xhr，知道使用new Promise(function(resolve, reject)的方式封装xhr对象，知道如何处理XHR.readyState === 4 和 XHR.status === 200的情况才能返回responseText\\n\"},{\"insert\":\"3. 3.5分：能考虑到var response = JSON.parse(XHR.responseText)转换text变json，知道搭配try catch对应resolve和reject\\n\"},{\"insert\":\"4. 4.0分：能很快实现xhr+promise，基本实现无错误，知道各种出错的状态码和边界条件，知道通过xhr.abort()的方式取消当次请求。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308094221","question_title":"请说明JAVAScript 的基数数据类型","i18n_question_title":"请说明JAVAScript 的基数数据类型","question_skill_list":[{"name":"js","i18n_name":"js","nick_name":null,"description":null},{"name":"语言基础","i18n_name":"语言基础","nick_name":null,"description":null},{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null},{"name":"CSS","i18n_name":"CSS","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"JavaScript 的基数数据类型包括哪些？","i18n_question_description":"JavaScript 的基数数据类型包括哪些？","question_answer":"JavaScript 的基数数据类型包括：Boolean、null、String、Number、undefined、object、Symbol\n3分 ： 能够答对5个\n3.5分： 能够答对全部","i18n_question_answer":"JavaScript 的基数数据类型包括：Boolean、null、String、Number、undefined、object、Symbol\n3分 ： 能够答对5个\n3.5分： 能够答对全部","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445587425429022","question_title":"销毁button按钮","i18n_question_title":"销毁button按钮","question_skill_list":[{"name":"编码","i18n_name":"编码","nick_name":null,"description":null},{"name":"事件","i18n_name":"事件","nick_name":null,"description":null},{"name":"编程","i18n_name":"编程","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"创建一个button，然后通过点击这个button，把button元素销毁，然后再在button所在的位置创建两个相同的button\n```\n<div id=\"doubleHolder\">\n  <button class=\"double\">double</button>\n</div>\n```","i18n_question_description":"创建一个button，然后通过点击这个button，把button元素销毁，然后再在button所在的位置创建两个相同的button\n```\n<div id=\"doubleHolder\">\n  <button class=\"double\">double</button>\n</div>\n```","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"document.getElementById('doubleHolder').addEventListener('click', function (e) { \\n\"},{\"insert\":\" if(e.target.classList.contains('double')){\\n\"},{\"insert\":\" var btn = document.createElement('button');\\n\"},{\"insert\":\" btn.setAttribute('class', 'double');\\n\"},{\"insert\":\" btn.innerHTML = 'double';\\n\"},{\"insert\":\" var btn2 = document.createElement('button');\\n\"},{\"insert\":\" btn2.setAttribute('class', 'double');\\n\"},{\"insert\":\" btn2.innerHTML = 'double';\\n\"},{\"insert\":\" this.appendChild(btn);\\n\"},{\"insert\":\" this.appendChild(btn2);\\n\"},{\"insert\":\" this.removeChild(e.target); \\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有思路，代码错误\\n\"},{\"insert\":\"2. 3.0分：这个题目主要考察销毁元素时候，如果节点本身有注册事件，需要解绑事件，然后remove才能彻底销毁，否则会导致内存泄漏，通过事件代理，可以避免问题复杂化，只需要remove节点本身，便可以直接销毁元素节点。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"document.getElementById('doubleHolder').addEventListener('click', function (e) { \\n\"},{\"insert\":\" if(e.target.classList.contains('double')){\\n\"},{\"insert\":\" var btn = document.createElement('button');\\n\"},{\"insert\":\" btn.setAttribute('class', 'double');\\n\"},{\"insert\":\" btn.innerHTML = 'double';\\n\"},{\"insert\":\" var btn2 = document.createElement('button');\\n\"},{\"insert\":\" btn2.setAttribute('class', 'double');\\n\"},{\"insert\":\" btn2.innerHTML = 'double';\\n\"},{\"insert\":\" this.appendChild(btn);\\n\"},{\"insert\":\" this.appendChild(btn2);\\n\"},{\"insert\":\" this.removeChild(e.target); \\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：没有思路，代码错误\\n\"},{\"insert\":\"2. 3.0分：这个题目主要考察销毁元素时候，如果节点本身有注册事件，需要解绑事件，然后remove才能彻底销毁，否则会导致内存泄漏，通过事件代理，可以避免问题复杂化，只需要remove节点本身，便可以直接销毁元素节点。\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308520205","question_title":"请说说HTML的Meta标签的用途，并列举一些常用的meta标签","i18n_question_title":"请说说HTML的Meta标签的用途，并列举一些常用的meta标签","question_skill_list":[{"name":"HTML","i18n_name":"HTML","nick_name":null,"description":null},{"name":"基础","i18n_name":"基础","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"HTML的Meta标签是干吗的，列举一些常用的meta标签？","i18n_question_description":"HTML的Meta标签是干吗的，列举一些常用的meta标签？","question_answer":"考察对网页结构和语义的理解 \n```\nThe HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\n```\nmeta标签俗称描述网页数据的数据，比如网页本身的编码；\n网页本身的作者，描述；还有一些更高级的功能性特性，比如dns预解析，定义视口表现等;\n常用的比如：\n```html\n<meta charset=\"utf-8\">\n<meta name=\"description\" content=\"A general guide on the use of meta tags in html pages\" />\n```\n3分 ：\n能够答出meta标签的意义，并且举出常规的meta标签使用方式\n本题为简单题目，答对得分，答错不得分","i18n_question_answer":"考察对网页结构和语义的理解 \n```\nThe HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\n```\nmeta标签俗称描述网页数据的数据，比如网页本身的编码；\n网页本身的作者，描述；还有一些更高级的功能性特性，比如dns预解析，定义视口表现等;\n常用的比如：\n```html\n<meta charset=\"utf-8\">\n<meta name=\"description\" content=\"A general guide on the use of meta tags in html pages\" />\n```\n3分 ：\n能够答出meta标签的意义，并且举出常规的meta标签使用方式\n本题为简单题目，答对得分，答错不得分","status_end_time":null,"assessment_create_time":null}],"BaseResp":{"StatusMessage":"SUCCESS","StatusCode":0,"Extra":null}},"message":"OK","special_case_code":0}
