{"code":0,"success":true,"data":{"has_more":true,"page_token":"K/62r3/mv+jaEcOluBC3qOrZOmNvlFMvznqWAKCHkB4=","assessments_list":[{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402307356941","question_title":"请编码实现HTML元素拖动功能","i18n_question_title":"请编码实现HTML元素拖动功能","question_skill_list":[{"name":"HTML","i18n_name":"HTML","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"实现一个元素随着鼠标移动的功能","i18n_question_description":"实现一个元素随着鼠标移动的功能","question_answer":null,"i18n_question_answer":null,"status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308012301","question_title":"请介绍一下模板引擎的原理","i18n_question_title":"请介绍一下模板引擎的原理","question_skill_list":[{"name":"HTML","i18n_name":"HTML","nick_name":null,"description":null},{"name":"框架相关","i18n_name":"框架相关","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"可以介绍一下模板引擎的原理，比如实现类似  \n```html\n<h1>{{aaa}}</h1>\n```\n这种模板将其中变量替换为对应值的方式。","i18n_question_description":"可以介绍一下模板引擎的原理，比如实现类似  \n```html\n<h1>{{aaa}}</h1>\n```\n这种模板将其中变量替换为对应值的方式。","question_answer":"正则的一些匹配，或编译原理实现，\n模板引擎是现代 MVVM 框架的一个基础，主要是考察下知识面情况，\n只要面试者说清楚了自己了解的实现方式即可。\n1. 2.5分及以下：完全不了解；\n2. 3.0分：能够给出实现原理的介绍，比如正则、编译原理等\n3. 3.5分：如果恰巧面试者写过一个，适当提分\n4. 4.0分：","i18n_question_answer":"正则的一些匹配，或编译原理实现，\n模板引擎是现代 MVVM 框架的一个基础，主要是考察下知识面情况，\n只要面试者说清楚了自己了解的实现方式即可。\n1. 2.5分及以下：完全不了解；\n2. 3.0分：能够给出实现原理的介绍，比如正则、编译原理等\n3. 3.5分：如果恰巧面试者写过一个，适当提分\n4. 4.0分：","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445585932699172","question_title":"用 react 实现一个树形目录树组件","i18n_question_title":"用 react 实现一个树形目录树组件","question_skill_list":[{"name":"编码","i18n_name":"编码","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"用 react 实现一个树形目录数组件，支持目录树的展示和点击展开收起操作","i18n_question_description":"用 react 实现一个树形目录数组件，支持目录树的展示和点击展开收起操作","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"数据结构\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"{\\n\"},{\"insert\":\" list: [{\\n\"},{\"insert\":\" id: '1',\\n\"},{\"insert\":\" name: 'folder1',\\n\"},{\"insert\":\" children: [{\\n\"},{\"insert\":\" id: '11',\\n\"},{\"insert\":\" name: 'file1'\\n\"},{\"insert\":\" }, {\\n\"},{\"insert\":\" id: '12',\\n\"},{\"insert\":\" name: 'file2'\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\" }, {\\n\"},{\"insert\":\" id: '2',\\n\"},{\"insert\":\" name: 'folder2',\\n\"},{\"insert\":\" children: [{\\n\"},{\"insert\":\" id: '21',\\n\"},{\"insert\":\" name: 'folder3',\\n\"},{\"insert\":\" children: [{\\n\"},{\"insert\":\" id: '211',\\n\"},{\"insert\":\" name: 'file3'\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\" }, {\\n\"},{\"insert\":\" id: '3',\\n\"},{\"insert\":\" name: \\\"file4\\\"\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"代码实现\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"// TreeMenu/node.js\\n\"},{\"insert\":\"import React, { Component } from 'react';\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"class TreeNode extends Component {\\n\"},{\"insert\":\" constructor() {\\n\"},{\"insert\":\" super();\\n\"},{\"insert\":\" this.state = {\\n\"},{\"insert\":\" // 默认收起\\n\"},{\"insert\":\" unfolded: false,\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" handleToggle() {\\n\"},{\"insert\":\" this.setState({\\n\"},{\"insert\":\" unfolded: !this.state.unfolded\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" render() {\\n\"},{\"insert\":\" const { name, children = [], show } = this.props;\\n\"},{\"insert\":\" const style = { paddingLeft: '30px', textAlign: 'left', display: 'none' };\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" if (show) {\\n\"},{\"insert\":\" style.display = 'block';\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return (\\n\"},{\"insert\":\" <div className=\\\"tree-node\\\" style={style}>\\n\"},{\"insert\":\" <p onClick={() => this.handleToggle()}>{name}</p>\\n\"},{\"insert\":\" {\\n\"},{\"insert\":\" children.map(item => (\\n\"},{\"insert\":\" <TreeNode\\n\"},{\"insert\":\" name={item.name}\\n\"},{\"insert\":\" children={item.children}\\n\"},{\"insert\":\" key={item.id} \\n\"},{\"insert\":\" show={this.state.unfolded}\\n\"},{\"insert\":\" />\\n\"},{\"insert\":\" ))\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" </div>\\n\"},{\"insert\":\" )\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"export default TreeNode;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"---\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"// TreeMenu/index.js\\n\"},{\"insert\":\"import React, { Component } from 'react';\\n\"},{\"insert\":\"import TreeNode from './node';\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"class TreeMenu extends Component {\\n\"},{\"insert\":\" render() {\\n\"},{\"insert\":\" const { list } = this.props;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return (\\n\"},{\"insert\":\" <div className=\\\"tree-menu\\\">\\n\"},{\"insert\":\" {\\n\"},{\"insert\":\" list.map(item => (\\n\"},{\"insert\":\" <TreeNode\\n\"},{\"insert\":\" name={item.name}\\n\"},{\"insert\":\" children={item.children}\\n\"},{\"insert\":\" key={item.id}\\n\"},{\"insert\":\" show={true}\\n\"},{\"insert\":\" />\\n\"},{\"insert\":\" ))\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" </div>\\n\"},{\"insert\":\" )\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"export default TreeMenu;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"使用：\\n\"},{\"insert\":\"<TreeMenu list={list} />\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"2. 3.0分：数据结构设计合理，想到递归组件，能正确展示目录结构\\n\"},{\"insert\":\"3. 3.5分：支持目录的展开和收起\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"数据结构\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"{\\n\"},{\"insert\":\" list: [{\\n\"},{\"insert\":\" id: '1',\\n\"},{\"insert\":\" name: 'folder1',\\n\"},{\"insert\":\" children: [{\\n\"},{\"insert\":\" id: '11',\\n\"},{\"insert\":\" name: 'file1'\\n\"},{\"insert\":\" }, {\\n\"},{\"insert\":\" id: '12',\\n\"},{\"insert\":\" name: 'file2'\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\" }, {\\n\"},{\"insert\":\" id: '2',\\n\"},{\"insert\":\" name: 'folder2',\\n\"},{\"insert\":\" children: [{\\n\"},{\"insert\":\" id: '21',\\n\"},{\"insert\":\" name: 'folder3',\\n\"},{\"insert\":\" children: [{\\n\"},{\"insert\":\" id: '211',\\n\"},{\"insert\":\" name: 'file3'\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\" }, {\\n\"},{\"insert\":\" id: '3',\\n\"},{\"insert\":\" name: \\\"file4\\\"\\n\"},{\"insert\":\" }]\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"代码实现\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"// TreeMenu/node.js\\n\"},{\"insert\":\"import React, { Component } from 'react';\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"class TreeNode extends Component {\\n\"},{\"insert\":\" constructor() {\\n\"},{\"insert\":\" super();\\n\"},{\"insert\":\" this.state = {\\n\"},{\"insert\":\" // 默认收起\\n\"},{\"insert\":\" unfolded: false,\\n\"},{\"insert\":\" };\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" handleToggle() {\\n\"},{\"insert\":\" this.setState({\\n\"},{\"insert\":\" unfolded: !this.state.unfolded\\n\"},{\"insert\":\" });\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" render() {\\n\"},{\"insert\":\" const { name, children = [], show } = this.props;\\n\"},{\"insert\":\" const style = { paddingLeft: '30px', textAlign: 'left', display: 'none' };\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" if (show) {\\n\"},{\"insert\":\" style.display = 'block';\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return (\\n\"},{\"insert\":\" <div className=\\\"tree-node\\\" style={style}>\\n\"},{\"insert\":\" <p onClick={() => this.handleToggle()}>{name}</p>\\n\"},{\"insert\":\" {\\n\"},{\"insert\":\" children.map(item => (\\n\"},{\"insert\":\" <TreeNode\\n\"},{\"insert\":\" name={item.name}\\n\"},{\"insert\":\" children={item.children}\\n\"},{\"insert\":\" key={item.id} \\n\"},{\"insert\":\" show={this.state.unfolded}\\n\"},{\"insert\":\" />\\n\"},{\"insert\":\" ))\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" </div>\\n\"},{\"insert\":\" )\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"export default TreeNode;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"---\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"// TreeMenu/index.js\\n\"},{\"insert\":\"import React, { Component } from 'react';\\n\"},{\"insert\":\"import TreeNode from './node';\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"class TreeMenu extends Component {\\n\"},{\"insert\":\" render() {\\n\"},{\"insert\":\" const { list } = this.props;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return (\\n\"},{\"insert\":\" <div className=\\\"tree-menu\\\">\\n\"},{\"insert\":\" {\\n\"},{\"insert\":\" list.map(item => (\\n\"},{\"insert\":\" <TreeNode\\n\"},{\"insert\":\" name={item.name}\\n\"},{\"insert\":\" children={item.children}\\n\"},{\"insert\":\" key={item.id}\\n\"},{\"insert\":\" show={true}\\n\"},{\"insert\":\" />\\n\"},{\"insert\":\" ))\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" </div>\\n\"},{\"insert\":\" )\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"export default TreeMenu;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"使用：\\n\"},{\"insert\":\"<TreeMenu list={list} />\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"2. 3.0分：数据结构设计合理，想到递归组件，能正确展示目录结构\\n\"},{\"insert\":\"3. 3.5分：支持目录的展开和收起\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445595297285668","question_title":"用正则将ejs风格的分隔符<%= %>变成mustache风格的{{ }}","i18n_question_title":"用正则将ejs风格的分隔符<%= %>变成mustache风格的{{ }}","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"ejs的模板分割符为<%= %>，有时候会与jsp的模板语法存在冲突，如何通过正则配置将其变成mustache风格的{{ }}\n```javascript\n  _.templateSettings = {\n       interpolate : // 补全正则\n\t};\n```\n能支持如下效果：\n```html\n<script type=\"text/template\" id=\"detailedBar-template\">\n        <div class='title'>\n            <span class='label'>本次消费</span>\n            <span class='numOfDinner'>{{numOfDiner}}人用餐</span>\n            <span class='amount'><span class='symbol'>{{currencySymbol}}</span>{{amount}}</span>\n        </div>\n    </script>\n```","i18n_question_description":"ejs的模板分割符为<%= %>，有时候会与jsp的模板语法存在冲突，如何通过正则配置将其变成mustache风格的{{ }}\n```javascript\n  _.templateSettings = {\n       interpolate : // 补全正则\n\t};\n```\n能支持如下效果：\n```html\n<script type=\"text/template\" id=\"detailedBar-template\">\n        <div class='title'>\n            <span class='label'>本次消费</span>\n            <span class='numOfDinner'>{{numOfDiner}}人用餐</span>\n            <span class='amount'><span class='symbol'>{{currencySymbol}}</span>{{amount}}</span>\n        </div>\n    </script>\n```","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"_.templateSettings = {\\n\"},{\"insert\":\" interpolate : /\\\\{\\\\{(.+?)\\\\}\\\\}/g\\n\"},{\"insert\":\"};\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：不会使用正则表达式处理\\n\"},{\"insert\":\"2. 3.0分：能知道正则替换的基本思路，能写出/{{ 和 }}\\n\"},{\"insert\":\"3. 3.5分：能考虑到填充内容部分的/{{(.+?)}}/，实现(.+?)\\n\"},{\"insert\":\"4. 4.0分：能很快写出替换规则，能考虑到细节/g，完整实现： /{{(.+?)}}/g\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"_.templateSettings = {\\n\"},{\"insert\":\" interpolate : /\\\\{\\\\{(.+?)\\\\}\\\\}/g\\n\"},{\"insert\":\"};\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：不会使用正则表达式处理\\n\"},{\"insert\":\"2. 3.0分：能知道正则替换的基本思路，能写出/{{ 和 }}\\n\"},{\"insert\":\"3. 3.5分：能考虑到填充内容部分的/{{(.+?)}}/，实现(.+?)\\n\"},{\"insert\":\"4. 4.0分：能很快写出替换规则，能考虑到细节/g，完整实现： /{{(.+?)}}/g\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402307225869","question_title":"请描述如何用原生JS实现数字的货币格式化","i18n_question_title":"请描述如何用原生JS实现数字的货币格式化","question_skill_list":[{"name":"数字格式化","i18n_name":"数字格式化","nick_name":null,"description":null},{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"# 如何用原生JS实现数字的货币格式化，例如数字6123456789格式化后为6,123,456,789，不低于两种方法。","i18n_question_description":"# 如何用原生JS实现数字的货币格式化，例如数字6123456789格式化后为6,123,456,789，不低于两种方法。","question_answer":"方法一： (6123456789).toLocaleString('en-US') // 6,123,456,789\n方法二： (6123456789).toString().split('').reverse().join('').replace(/\\d{3}/g,function($1){return $1+','}).split('').reverse().join('')\n1. 2.5分及以下： 一点思路没有 2. 3.0分： 实现了一种方法，能准确完成 3. 3.5分： 能实现2种以上方法 4. 4.0分：","i18n_question_answer":"方法一： (6123456789).toLocaleString('en-US') // 6,123,456,789\n方法二： (6123456789).toString().split('').reverse().join('').replace(/\\d{3}/g,function($1){return $1+','}).split('').reverse().join('')\n1. 2.5分及以下： 一点思路没有 2. 3.0分： 实现了一种方法，能准确完成 3. 3.5分： 能实现2种以上方法 4. 4.0分：","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445585932453412","question_title":"编写javascript深度克隆函数deepClone","i18n_question_title":"编写javascript深度克隆函数deepClone","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"编写javascript深度克隆函数deepClone","i18n_question_description":"编写javascript深度克隆函数deepClone","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"function deepClone(obj) {\\n\"},{\"insert\":\" var _toString = Object.prototype.toString;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // null, undefined, non-object, function\\n\"},{\"insert\":\" if (!obj || typeof obj !== 'object') {\\n\"},{\"insert\":\" return obj;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // DOM Node\\n\"},{\"insert\":\" if (obj.nodeType && 'cloneNode' in obj) {\\n\"},{\"insert\":\" return obj.cloneNode(true);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // Date\\n\"},{\"insert\":\" if (_toString.call(obj) === '[object Date]') {\\n\"},{\"insert\":\" return new Date(obj.getTime());\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // RegExp\\n\"},{\"insert\":\" if (_toString.call(obj) === '[object RegExp]') {\\n\"},{\"insert\":\" var flags = [];\\n\"},{\"insert\":\" if (obj.global) { flags.push('g'); }\\n\"},{\"insert\":\" if (obj.multiline) { flags.push('m'); }\\n\"},{\"insert\":\" if (obj.ignoreCase) { flags.push('i'); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return new RegExp(obj.source, flags.join(''));\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var result = Array.isArray(obj) ? [] :\\n\"},{\"insert\":\" obj.constructor ? new obj.constructor() : {};\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" for (var key in obj ) {\\n\"},{\"insert\":\" result[key] = deepClone(obj[key]);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return result;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"function A() {\\n\"},{\"insert\":\" this.a = a;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"var a = {\\n\"},{\"insert\":\" name: 'qiu',\\n\"},{\"insert\":\" birth: new Date(),\\n\"},{\"insert\":\" pattern: /qiu/gim,\\n\"},{\"insert\":\" container: document.body,\\n\"},{\"insert\":\" hobbys: ['book', new Date(), /aaa/gim, 111]\\n\"},{\"insert\":\"};\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"var c = new A();\\n\"},{\"insert\":\"var b = deepClone(c);\\n\"},{\"insert\":\"console.log(c.a === b.a);\\n\"},{\"insert\":\"console.log(c, b);\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"没写出或者只考虑了object、数值、字符串\\n\"},{\"insert\":\"2. 3.0分：\\n\"},{\"insert\":\"考虑了日期、正则\\n\"},{\"insert\":\"3. 3.5分：\\n\"},{\"insert\":\"考虑DOM Node\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"javascript\\n\"},{\"insert\":\"function deepClone(obj) {\\n\"},{\"insert\":\" var _toString = Object.prototype.toString;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // null, undefined, non-object, function\\n\"},{\"insert\":\" if (!obj || typeof obj !== 'object') {\\n\"},{\"insert\":\" return obj;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // DOM Node\\n\"},{\"insert\":\" if (obj.nodeType && 'cloneNode' in obj) {\\n\"},{\"insert\":\" return obj.cloneNode(true);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // Date\\n\"},{\"insert\":\" if (_toString.call(obj) === '[object Date]') {\\n\"},{\"insert\":\" return new Date(obj.getTime());\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // RegExp\\n\"},{\"insert\":\" if (_toString.call(obj) === '[object RegExp]') {\\n\"},{\"insert\":\" var flags = [];\\n\"},{\"insert\":\" if (obj.global) { flags.push('g'); }\\n\"},{\"insert\":\" if (obj.multiline) { flags.push('m'); }\\n\"},{\"insert\":\" if (obj.ignoreCase) { flags.push('i'); }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return new RegExp(obj.source, flags.join(''));\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" var result = Array.isArray(obj) ? [] :\\n\"},{\"insert\":\" obj.constructor ? new obj.constructor() : {};\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" for (var key in obj ) {\\n\"},{\"insert\":\" result[key] = deepClone(obj[key]);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" return result;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"function A() {\\n\"},{\"insert\":\" this.a = a;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"var a = {\\n\"},{\"insert\":\" name: 'qiu',\\n\"},{\"insert\":\" birth: new Date(),\\n\"},{\"insert\":\" pattern: /qiu/gim,\\n\"},{\"insert\":\" container: document.body,\\n\"},{\"insert\":\" hobbys: ['book', new Date(), /aaa/gim, 111]\\n\"},{\"insert\":\"};\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"var c = new A();\\n\"},{\"insert\":\"var b = deepClone(c);\\n\"},{\"insert\":\"console.log(c.a === b.a);\\n\"},{\"insert\":\"console.log(c, b);\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"没写出或者只考虑了object、数值、字符串\\n\"},{\"insert\":\"2. 3.0分：\\n\"},{\"insert\":\"考虑了日期、正则\\n\"},{\"insert\":\"3. 3.5分：\\n\"},{\"insert\":\"考虑DOM Node\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445596262745630","question_title":"怎么判断一个object是否是数组(array)","i18n_question_title":"怎么判断一个object是否是数组(array)","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"怎么判断一个object是否是数组(array)，请至少写出2种方法。","i18n_question_description":"怎么判断一个object是否是数组(array)，请至少写出2种方法。","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"### 方法一\\n\"},{\"insert\":\"使用 Object.prototype.toString 来判断是否是数组\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"function isArray(obj){\\n\"},{\"insert\":\" return Object.prototype.toString.call( obj ) === '[object Array]';\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"2. ### 方法二\\n\"},{\"insert\":\"使用 原型链 来完成判断\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"function isArray(obj){\\n\"},{\"insert\":\" return obj.__proto__ === Array.prototype;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"没写出或只写出一种\\n\"},{\"insert\":\"2. 3.0分：\\n\"},{\"insert\":\"能写出两种方法\\n\"},{\"insert\":\"3. 3.5分：\\n\"},{\"insert\":\"能写出两种方法以上，并能熟练的掌握toString、原型链的工作原理\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"### 方法一\\n\"},{\"insert\":\"使用 Object.prototype.toString 来判断是否是数组\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"function isArray(obj){\\n\"},{\"insert\":\" return Object.prototype.toString.call( obj ) === '[object Array]';\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"2. ### 方法二\\n\"},{\"insert\":\"使用 原型链 来完成判断\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"javascript\\n\"},{\"insert\":\"function isArray(obj){\\n\"},{\"insert\":\" return obj.__proto__ === Array.prototype;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"没写出或只写出一种\\n\"},{\"insert\":\"2. 3.0分：\\n\"},{\"insert\":\"能写出两种方法\\n\"},{\"insert\":\"3. 3.5分：\\n\"},{\"insert\":\"能写出两种方法以上，并能熟练的掌握toString、原型链的工作原理\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445587425642014","question_title":"binary tree","i18n_question_title":"binary tree","question_skill_list":[{"name":"基础算法","i18n_name":"基础算法","nick_name":null,"description":null},{"name":"编码","i18n_name":"编码","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"For example: Given the below binary tree and sum = 22,\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\      \\\n7    2      1\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.","i18n_question_description":"For example: Given the below binary tree and sum = 22,\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\      \\\n7    2      1\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"public boolean hasPathSum(TreeNode root, int sum) {\\n\"},{\"insert\":\"    if(root == null) return false;\\n\"},{\"insert\":\"    int left = sum - root.val;\\n\"},{\"insert\":\"    if(root.left == null &amp;&amp; root.right == null &amp;&amp; left == 0) {\\n\"},{\"insert\":\"        return true;\\n\"},{\"insert\":\"    }\\n\"},{\"insert\":\"    return hasPathSum(root.left, left) || hasPathSum(root.right, left);\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"public boolean hasPathSum(TreeNode root, int sum) {\\n\"},{\"insert\":\"    if(root == null) return false;\\n\"},{\"insert\":\"    int left = sum - root.val;\\n\"},{\"insert\":\"    if(root.left == null &amp;&amp; root.right == null &amp;&amp; left == 0) {\\n\"},{\"insert\":\"        return true;\\n\"},{\"insert\":\"    }\\n\"},{\"insert\":\"    return hasPathSum(root.left, left) || hasPathSum(root.right, left);\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"6960495402308405517","question_title":"请谈谈你对new操作符的理解","i18n_question_title":"请谈谈你对new操作符的理解","question_skill_list":[{"name":"js","i18n_name":"js","nick_name":null,"description":null},{"name":"语言基础","i18n_name":"语言基础","nick_name":null,"description":null},{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"考察候选人对原型链操作和js对象的理解","i18n_question_description":"考察候选人对原型链操作和js对象的理解","question_answer":"1. 简单回答：\n1. 创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n1. 属性和方法被加入到 this 引用的对象中。\n3. 新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n```javascript\nfunction Animal(name) {\n      this.name = name;\n}\n  Animal.prototype.run = function() {\n      console.log(this.name + 'can run...');\n}\nvar cat = new Animal('cat'); //    \nnew Animal('cat')=function(){\nlet obj={}; //       \nobj.__proto__=Animal.prototype; // obj->Animal.prototype->Object.prototype->null\nreturn Animal.call(obj,'cat');//   this        \n}\n```\n1. 2.5分及以下：回答不出new运算的操作过程\n2. 3.0分：能说对简单答案中的前两部操作过程\n3. 3.5分：能说对新创建的对象由 this 所引用，并且最后隐式的返回 this这个细节 。\n4. 4.0分：能给出代码示例，并且完成__proto_和prototype等实现。","i18n_question_answer":"1. 简单回答：\n1. 创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n1. 属性和方法被加入到 this 引用的对象中。\n3. 新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n```javascript\nfunction Animal(name) {\n      this.name = name;\n}\n  Animal.prototype.run = function() {\n      console.log(this.name + 'can run...');\n}\nvar cat = new Animal('cat'); //    \nnew Animal('cat')=function(){\nlet obj={}; //       \nobj.__proto__=Animal.prototype; // obj->Animal.prototype->Object.prototype->null\nreturn Animal.call(obj,'cat');//   this        \n}\n```\n1. 2.5分及以下：回答不出new运算的操作过程\n2. 3.0分：能说对简单答案中的前两部操作过程\n3. 3.5分：能说对新创建的对象由 this 所引用，并且最后隐式的返回 this这个细节 。\n4. 4.0分：能给出代码示例，并且完成__proto_和prototype等实现。","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445591128081933","question_title":"用Js实现多重继承","i18n_question_title":"用Js实现多重继承","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"function M1() {\n  this.hello = 'hello';\n}\nfunction M2() {\n  this.world = 'world';\n}","i18n_question_description":"function M1() {\n  this.hello = 'hello';\n}\nfunction M2() {\n  this.world = 'world';\n}","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"function S() {\\n\"},{\"insert\":\"  M1.call(this);\\n\"},{\"insert\":\"  M2.call(this);\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"// 继承 M1\\n\"},{\"insert\":\"S.prototype = Object.create(M1.prototype);\\n\"},{\"insert\":\"// 继承链上加入 M2\\n\"},{\"insert\":\"Object.assign(S.prototype, M2.prototype);\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 指定构造函数\\n\"},{\"insert\":\"S.prototype.constructor = S;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"var s = new S();\\n\"},{\"insert\":\"s.hello // 'hello'\\n\"},{\"insert\":\"s.world // 'world'\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"3.5分\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"function S() {\\n\"},{\"insert\":\"  M1.call(this);\\n\"},{\"insert\":\"  M2.call(this);\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"// 继承 M1\\n\"},{\"insert\":\"S.prototype = Object.create(M1.prototype);\\n\"},{\"insert\":\"// 继承链上加入 M2\\n\"},{\"insert\":\"Object.assign(S.prototype, M2.prototype);\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 指定构造函数\\n\"},{\"insert\":\"S.prototype.constructor = S;\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"var s = new S();\\n\"},{\"insert\":\"s.hello // 'hello'\\n\"},{\"insert\":\"s.world // 'world'\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"3.5分\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null}],"BaseResp":{"StatusMessage":"SUCCESS","StatusCode":0,"Extra":null}},"message":"OK","special_case_code":0}
