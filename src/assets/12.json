{"code":0,"success":true,"data":{"has_more":true,"page_token":"koSQyX853FzwUV9aZqWyo0IR3bl1DSFVUqg08PvD9Kk=","assessments_list":[{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971845663","question_title":"简述React Fiber原理","i18n_question_title":"简述React Fiber原理","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"试描述React Fiber的原理。","i18n_question_description":"试描述React Fiber的原理。","question_answer":"官方的一句话解释是“React Fiber是对核心算法的一次重新实现”。\n之前React的更新过程是同步的，所有更新逻辑会在一帧之内完成，如果组件过于复杂则会导致更新时间超过一帧，其他事务包括用户输入都会被延迟响应，从而引发卡顿。破解方式——分片。有了分片之后，更新过程的调用栈如下图所示，中间每一个波谷代表深入某个分片的执行过程，每个波峰就是一个分片执行结束交还控制权的时机。\n实现使用的API：requestIdleCallback\nQ.为什么引入Fiber架构？原架构有何不足？\nA.原架构采用递归遍历方式来更新DOM树，一旦开始，即占用主线程，无法中断，这在页面上会引起问题，如input输入后页面卡顿等\nQ.Fiber如何解决该问题\nA.时间分片和暂停\nQ.Fiber如何实现？\nA.使用链表结构，将递归遍历更改为循环遍历，然后配合requestIdleCallback API，实现任务拆分、中断和恢复\nQ.Fiber如何实现比较？\nA.双缓冲技术，在diff过程中创建新的DOM Tree，diff完成之后生成EffectList，即需要更新的地方，之后进入commit阶段，该阶段不允许中断。\nQ.React Hook基于Fiber架构，hook的复用是如何实现的？\nA.hook的数据存在于Fiber节点的数据结构中，具体为memoizedState中，该字段中存储了所有hook相关的信息\n没有思路：0分\n说出是一种渲染优化方式：2分\n说出分片策略：3分\n说出使用了requestIdleCallback API：3.5分\n对React Fiber策略非常熟悉：4分","i18n_question_answer":"官方的一句话解释是“React Fiber是对核心算法的一次重新实现”。\n之前React的更新过程是同步的，所有更新逻辑会在一帧之内完成，如果组件过于复杂则会导致更新时间超过一帧，其他事务包括用户输入都会被延迟响应，从而引发卡顿。破解方式——分片。有了分片之后，更新过程的调用栈如下图所示，中间每一个波谷代表深入某个分片的执行过程，每个波峰就是一个分片执行结束交还控制权的时机。\n实现使用的API：requestIdleCallback\nQ.为什么引入Fiber架构？原架构有何不足？\nA.原架构采用递归遍历方式来更新DOM树，一旦开始，即占用主线程，无法中断，这在页面上会引起问题，如input输入后页面卡顿等\nQ.Fiber如何解决该问题\nA.时间分片和暂停\nQ.Fiber如何实现？\nA.使用链表结构，将递归遍历更改为循环遍历，然后配合requestIdleCallback API，实现任务拆分、中断和恢复\nQ.Fiber如何实现比较？\nA.双缓冲技术，在diff过程中创建新的DOM Tree，diff完成之后生成EffectList，即需要更新的地方，之后进入commit阶段，该阶段不允许中断。\nQ.React Hook基于Fiber架构，hook的复用是如何实现的？\nA.hook的数据存在于Fiber节点的数据结构中，具体为memoizedState中，该字段中存储了所有hook相关的信息\n没有思路：0分\n说出是一种渲染优化方式：2分\n说出分片策略：3分\n说出使用了requestIdleCallback API：3.5分\n对React Fiber策略非常熟悉：4分","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255972058655","question_title":"(如下图) 已知列表包含N个Item, 每个Item的高度 [{ index: 0, height: 50 }, .....] 与 列表滑动的位移X, 设备高度H, 求当前位于屏幕中线的item 索引. (Item间隔忽略不计)","i18n_question_title":"(如下图) 已知列表包含N个Item, 每个Item的高度 [{ index: 0, height: 50 }, .....] 与 列表滑动的位移X, 设备高度H, 求当前位于屏幕中线的item 索引. (Item间隔忽略不计)","question_skill_list":null,"score":null,"content":null,"question_description":"<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/Lark20200216-222624.png\" width=\"375\" height=\"0\" alt=\"Lark20200216-222624.png\" style=\"margin: auto; display: block;\">\n<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/Lark20200216-222624.png\" width=\"375\" height=\"0\" alt=\"Lark20200216-222624.png\" style=\"margin: auto; display: block;\">","i18n_question_description":"<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/Lark20200216-222624.png\" width=\"375\" height=\"0\" alt=\"Lark20200216-222624.png\" style=\"margin: auto; display: block;\">\n<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/Lark20200216-222624.png\" width=\"375\" height=\"0\" alt=\"Lark20200216-222624.png\" style=\"margin: auto; display: block;\">","question_answer":"知道中线位置X + H/2\n知道先计算出每个Item距离顶部的Offset\n知道使用每次滑动期间使用中线位置去查找\n知道使用更高效的方式去查找(如二分, 就近值查找)\n可以继续拓展性能(如防抖动、列表在千级别元素如何减少计算量)\n没思路 2分\n满足1、2条件 2.5分\n满足3条件3分\n满足4条件3.5分","i18n_question_answer":"知道中线位置X + H/2\n知道先计算出每个Item距离顶部的Offset\n知道使用每次滑动期间使用中线位置去查找\n知道使用更高效的方式去查找(如二分, 就近值查找)\n可以继续拓展性能(如防抖动、列表在千级别元素如何减少计算量)\n没思路 2分\n满足1、2条件 2.5分\n满足3条件3分\n满足4条件3.5分","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445596262794782","question_title":"使用js操作select元素","i18n_question_title":"使用js操作select元素","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"js中如何获取select选中的option 如何动态增加修改删除option","i18n_question_description":"js中如何获取select选中的option 如何动态增加修改删除option","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"考察候选人对select和dom的理解\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 创建select\\n\"},{\"insert\":\" function createSelect() {\\n\"},{\"insert\":\" var mySelect = document.createElement(\\\"select\\\");\\n\"},{\"insert\":\" mySelect.id = 'mySelect';\\n\"},{\"insert\":\" document.body.appendChild(mySelect);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" createSelect();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 添加option\\n\"},{\"insert\":\" function addOption() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" objSelect.add(new Option(\\\"文本1\\\", \\\"值1\\\"));// ie\\n\"},{\"insert\":\" objSelect.options.add(new Option(\\\"文本2\\\", \\\"值2\\\"));// 文本是展示出来的内容\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" addOption();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 删除所有option\\n\"},{\"insert\":\" function removeAllOption() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" objSelect.options.length = 0;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" // removeAllOption();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 删除当前的option\\n\"},{\"insert\":\" function removeNow() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" var index = objSelect.selectedIndex;\\n\"},{\"insert\":\" objSelect.options.remove(index);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" removeNow();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 获取当前option的内容\\n\"},{\"insert\":\" function getNow() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" var index = objSelect.selectedIndex;\\n\"},{\"insert\":\" var nowVal = objSelect.options[index].value;// objSelect.options[index].text\\n\"},{\"insert\":\" console.log(nowVal);// 值2\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" getNow();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 修改当前option\\n\"},{\"insert\":\" function modifyOption() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" var index = objSelect.selectedIndex;\\n\"},{\"insert\":\" objSelect.options[index]=new Option(\\\"新修改的\\\",\\\"new\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" modifyOption();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 删除select\\n\"},{\"insert\":\" function removeSelect() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" objSelect.parentNode.removeChild(objSelect);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" removeSelect();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"回答不出来\\n\"},{\"insert\":\"2. 3.0分：\\n\"},{\"insert\":\"知道如何获取select选中的option 增删改可以使用innerHTML实现\\n\"},{\"insert\":\"3. 3.5分：\\n\"},{\"insert\":\"能通过原生dom操作实现增删改\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"考察候选人对select和dom的理解\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"// 创建select\\n\"},{\"insert\":\" function createSelect() {\\n\"},{\"insert\":\" var mySelect = document.createElement(\\\"select\\\");\\n\"},{\"insert\":\" mySelect.id = 'mySelect';\\n\"},{\"insert\":\" document.body.appendChild(mySelect);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" createSelect();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 添加option\\n\"},{\"insert\":\" function addOption() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" objSelect.add(new Option(\\\"文本1\\\", \\\"值1\\\"));// ie\\n\"},{\"insert\":\" objSelect.options.add(new Option(\\\"文本2\\\", \\\"值2\\\"));// 文本是展示出来的内容\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" addOption();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 删除所有option\\n\"},{\"insert\":\" function removeAllOption() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" objSelect.options.length = 0;\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" // removeAllOption();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 删除当前的option\\n\"},{\"insert\":\" function removeNow() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" var index = objSelect.selectedIndex;\\n\"},{\"insert\":\" objSelect.options.remove(index);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" removeNow();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 获取当前option的内容\\n\"},{\"insert\":\" function getNow() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" var index = objSelect.selectedIndex;\\n\"},{\"insert\":\" var nowVal = objSelect.options[index].value;// objSelect.options[index].text\\n\"},{\"insert\":\" console.log(nowVal);// 值2\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" getNow();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 修改当前option\\n\"},{\"insert\":\" function modifyOption() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" var index = objSelect.selectedIndex;\\n\"},{\"insert\":\" objSelect.options[index]=new Option(\\\"新修改的\\\",\\\"new\\\");\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" modifyOption();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\" // 删除select\\n\"},{\"insert\":\" function removeSelect() {\\n\"},{\"insert\":\" var objSelect = document.querySelector(\\\"#mySelect\\\");\\n\"},{\"insert\":\" objSelect.parentNode.removeChild(objSelect);\\n\"},{\"insert\":\" }\\n\"},{\"insert\":\" removeSelect();\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"1. 2.5分及以下：\\n\"},{\"insert\":\"回答不出来\\n\"},{\"insert\":\"2. 3.0分：\\n\"},{\"insert\":\"知道如何获取select选中的option 增删改可以使用innerHTML实现\\n\"},{\"insert\":\"3. 3.5分：\\n\"},{\"insert\":\"能通过原生dom操作实现增删改\\n\"},{\"insert\":\"4. 4.0分：\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445587425527326","question_title":"JS限流调度器","i18n_question_title":"JS限流调度器","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"实现JS限流调度器，方法add接收一个返回Promise的函数，同时执行的任务数量不能超过两个。\nclass Scheduler {\n    async add(promiseFunc: () => Promise<void>): Promise<void> {\n    }\n}\nconst scheduler = new Scheduler()\nconst timeout = (time) => {\n    return new Promise(r => setTimeout(r, time))\n}\nconst addTask = (time, order) => {\n    scheduler.add(() => timeout(time))\n        .then(() => console.log(order))\n}\naddTask(1000, 1)\naddTask(500, 2)\naddTask(300, 3)\naddTask(400, 4)\n// log: 2 3 1 4","i18n_question_description":"实现JS限流调度器，方法add接收一个返回Promise的函数，同时执行的任务数量不能超过两个。\nclass Scheduler {\n    async add(promiseFunc: () => Promise<void>): Promise<void> {\n    }\n}\nconst scheduler = new Scheduler()\nconst timeout = (time) => {\n    return new Promise(r => setTimeout(r, time))\n}\nconst addTask = (time, order) => {\n    scheduler.add(() => timeout(time))\n        .then(() => console.log(order))\n}\naddTask(1000, 1)\naddTask(500, 2)\naddTask(300, 3)\naddTask(400, 4)\n// log: 2 3 1 4","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"class Scheduler {\\n\"},{\"insert\":\"    constructor() {\\n\"},{\"insert\":\"        this.concurrency = 0\\n\"},{\"insert\":\"        this.queue = []\\n\"},{\"insert\":\"    }\\n\"},{\"insert\":\"    async add(promiseFunc) {\\n\"},{\"insert\":\"        if (this.concurrency &gt;= 2) {\\n\"},{\"insert\":\"            return new Promise(r =&gt; {\\n\"},{\"insert\":\"                this.queue.push(() =&gt; promiseFunc().then(r))\\n\"},{\"insert\":\"            })\\n\"},{\"insert\":\"        }\\n\"},{\"insert\":\"        this.concurrency += 1\\n\"},{\"insert\":\"        await promiseFunc()\\n\"},{\"insert\":\"        this.concurrency -= 1\\n\"},{\"insert\":\"        let next = this.queue.shift()\\n\"},{\"insert\":\"        if (next) {\\n\"},{\"insert\":\"            this.add(next)\\n\"},{\"insert\":\"        }\\n\"},{\"insert\":\"    }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"const scheduler = new Scheduler()\\n\"},{\"insert\":\"const timeout = (time) =&gt; {\\n\"},{\"insert\":\"    return new Promise(r =&gt; setTimeout(r, time))\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"const addTask = (time, order) =&gt; {\\n\"},{\"insert\":\"    scheduler.add(() =&gt; timeout(time))\\n\"},{\"insert\":\"        .then(() =&gt; console.log(order))\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"addTask(1000, 1)\\n\"},{\"insert\":\"addTask(500, 2)\\n\"},{\"insert\":\"addTask(300, 3)\\n\"},{\"insert\":\"addTask(400, 4)\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"实现功能3分\\n\"},{\"insert\":\"能考虑报错3.5分\\n\"},{\"insert\":\"可配置错误，代码风格漂亮4分\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"class Scheduler {\\n\"},{\"insert\":\"    constructor() {\\n\"},{\"insert\":\"        this.concurrency = 0\\n\"},{\"insert\":\"        this.queue = []\\n\"},{\"insert\":\"    }\\n\"},{\"insert\":\"    async add(promiseFunc) {\\n\"},{\"insert\":\"        if (this.concurrency &gt;= 2) {\\n\"},{\"insert\":\"            return new Promise(r =&gt; {\\n\"},{\"insert\":\"                this.queue.push(() =&gt; promiseFunc().then(r))\\n\"},{\"insert\":\"            })\\n\"},{\"insert\":\"        }\\n\"},{\"insert\":\"        this.concurrency += 1\\n\"},{\"insert\":\"        await promiseFunc()\\n\"},{\"insert\":\"        this.concurrency -= 1\\n\"},{\"insert\":\"        let next = this.queue.shift()\\n\"},{\"insert\":\"        if (next) {\\n\"},{\"insert\":\"            this.add(next)\\n\"},{\"insert\":\"        }\\n\"},{\"insert\":\"    }\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"const scheduler = new Scheduler()\\n\"},{\"insert\":\"const timeout = (time) =&gt; {\\n\"},{\"insert\":\"    return new Promise(r =&gt; setTimeout(r, time))\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"const addTask = (time, order) =&gt; {\\n\"},{\"insert\":\"    scheduler.add(() =&gt; timeout(time))\\n\"},{\"insert\":\"        .then(() =&gt; console.log(order))\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"addTask(1000, 1)\\n\"},{\"insert\":\"addTask(500, 2)\\n\"},{\"insert\":\"addTask(300, 3)\\n\"},{\"insert\":\"addTask(400, 4)\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"实现功能3分\\n\"},{\"insert\":\"能考虑报错3.5分\\n\"},{\"insert\":\"可配置错误，代码风格漂亮4分\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445587425461790","question_title":"函数科里化，实现如下函数add,使如下执行都等于9 ","i18n_question_title":"函数科里化，实现如下函数add,使如下执行都等于9 ","question_skill_list":[{"name":"编码","i18n_name":"编码","nick_name":null,"description":null},{"name":"柯里化","i18n_name":"柯里化","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"add(2,3,4)=9\nadd(2)(3,4)=9\nadd(2)(3)(4)=9\nadd(2,3)(4)=9","i18n_question_description":"add(2,3,4)=9\nadd(2)(3,4)=9\nadd(2)(3)(4)=9\nadd(2,3)(4)=9","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7034445587425510942","question_title":"链式调用+延迟计算","i18n_question_title":"链式调用+延迟计算","question_skill_list":[{"name":"编码","i18n_name":"编码","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"写一个加法函数sum，支持sum(1)(2)(3,4)(5,6,7....)\nconsole.log(sum(1,2,3)(4)) => 输出 10\n考察链式调用，闭包，延迟计算，函数toStirng/valueOf","i18n_question_description":"写一个加法函数sum，支持sum(1)(2)(3,4)(5,6,7....)\nconsole.log(sum(1,2,3)(4)) => 输出 10\n考察链式调用，闭包，延迟计算，函数toStirng/valueOf","question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"function sum(...args) {\\n\"},{\"insert\":\"  function next(...innerArgs) {\\n\"},{\"insert\":\"    args.push(...innerArgs);\\n\"},{\"insert\":\"    return next;\\n\"},{\"insert\":\"  }\\n\"},{\"insert\":\"  next.valueOf = next.toString = () =&gt; {\\n\"},{\"insert\":\"    return args.reduce((r, c) =&gt; r + c, 0);\\n\"},{\"insert\":\"  };\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"  return next;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","i18n_question_answer":"{\"0\":{\"ops\":[{\"insert\":\"\\n\"},{\"insert\":\"function sum(...args) {\\n\"},{\"insert\":\"  function next(...innerArgs) {\\n\"},{\"insert\":\"    args.push(...innerArgs);\\n\"},{\"insert\":\"    return next;\\n\"},{\"insert\":\"  }\\n\"},{\"insert\":\"  next.valueOf = next.toString = () =&gt; {\\n\"},{\"insert\":\"    return args.reduce((r, c) =&gt; r + c, 0);\\n\"},{\"insert\":\"  };\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"  return next;\\n\"},{\"insert\":\"}\\n\"},{\"insert\":\"\\n\"},{\"insert\":\"\\n\"}],\"zoneId\":\"0\",\"zoneType\":\"Z\"}}","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239917196836","question_title":"基于 Set 实现集合运算","i18n_question_title":"基于 Set 实现集合运算","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"基于 es6 的 Set 数据类型，实现两个集合的并交差运算。","i18n_question_description":"基于 es6 的 Set 数据类型，实现两个集合的并交差运算。","question_answer":"1. 2.5分及以下：\n2. 3.0分：\n3. 3.5分：\n4. 4.0分：","i18n_question_answer":"1. 2.5分及以下：\n2. 3.0分：\n3. 3.5分：\n4. 4.0分：","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058255971812895","question_title":"故障分析-HTTPS证书不被信任","i18n_question_title":"故障分析-HTTPS证书不被信任","question_skill_list":[{"name":"浏览器","i18n_name":"浏览器","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"如下图，在不同的设备上，同时访问同一个域名，一个设备显示证书不被信任，另一个设备正常，再使用多个其他设备访问，依然正常。分析可能的原因？以及需要获取的进一步的信息？\n正常的设备\n<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/ssl_success.png\" width=\"375\" height=\"164.58333333333334\" alt=\"ssl_success.png\" style=\"margin: auto; display: block;\">异常的设备\n<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/ssl_error.png\" width=\"375\" height=\"134.34278350515464\" alt=\"ssl_error.png\" style=\"margin: auto; display: block;\">","i18n_question_description":"如下图，在不同的设备上，同时访问同一个域名，一个设备显示证书不被信任，另一个设备正常，再使用多个其他设备访问，依然正常。分析可能的原因？以及需要获取的进一步的信息？\n正常的设备\n<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/ssl_success.png\" width=\"375\" height=\"164.58333333333334\" alt=\"ssl_success.png\" style=\"margin: auto; display: block;\">异常的设备\n<img src=\"https://tosv.byted.org/obj/pgc-fes/marvel/ssl_error.png\" width=\"375\" height=\"134.34278350515464\" alt=\"ssl_error.png\" style=\"margin: auto; display: block;\">","question_answer":"需要进行的进一步的操作：\n1) 查看证书详情：路径/SN/哈希值\n2) 查看DNS解析结果\n3) 查看系统时间/版本/浏览器版本\n可能的原因：\n1) 代理工具/安全软硬件\n2) DNS劫持/路由劫持\n3) 时间偏差\n4) 操作系统/浏览器版本差异\n3分：能答出操作“查看证书详情”，以及前两个原因。\n3.5分：能提出2个以上的操作，或3个以上的原因，并结合TLS协议进行分析。","i18n_question_answer":"需要进行的进一步的操作：\n1) 查看证书详情：路径/SN/哈希值\n2) 查看DNS解析结果\n3) 查看系统时间/版本/浏览器版本\n可能的原因：\n1) 代理工具/安全软硬件\n2) DNS劫持/路由劫持\n3) 时间偏差\n4) 操作系统/浏览器版本差异\n3分：能答出操作“查看证书详情”，以及前两个原因。\n3.5分：能提出2个以上的操作，或3个以上的原因，并结合TLS协议进行分析。","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239916639780","question_title":"利用defineProperty实现一个最简单的双向数据绑定","i18n_question_title":"利用defineProperty实现一个最简单的双向数据绑定","question_skill_list":null,"score":null,"content":null,"question_description":"已知页面上与一个input输入框和一个现实结果的p标签，要求实现在输入框中输入文字的时候，下面的p标签内能同步现实input中的输入内容，\n```html\n<body>\n <input type=\"text\" id=\"demo\">\n <p id=\"display\">\n</body>\n```","i18n_question_description":"已知页面上与一个input输入框和一个现实结果的p标签，要求实现在输入框中输入文字的时候，下面的p标签内能同步现实input中的输入内容，\n```html\n<body>\n <input type=\"text\" id=\"demo\">\n <p id=\"display\">\n</body>\n```","question_answer":"html部分：\n```html\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<input type=\"text\" id=\"demo\">\n<p id=\"display\">\n</body>\n</html>\n```\njavascript实现部分\n```javascript\n(function(){\n    var obj={};\n    var bind=[];\n    //触发obj对象set和get方法的时候，趁机来输出或修改bind数组的内容\n    Object.defineProperty(obj,'s',{\n      set:function(val){\n        bind['s']=val;\n      },\n      get:function(){\n        return bind['s'];\n      }\n    })\n    var demo=document.querySelector('#demo');\n    var display=document.querySelector('#display');\n    //#demo的value值与bind['s']绑定，#display的innerHTML也与bind['s']绑定。\n    demo.onkeyup=function(){\n      obj['s']=demo.value;//触发了obj的set方法，等于#demo的value值赋值给bind['s']。\n      display.innerHTML=bind['s'];\n    }\n  })()\n````\n1. 2.5分及以下：完全没有思路，不知道如何利用Object.defineProperty的用法，不知道Property的定义方式\n2. 3.0分：知道用var obj={}和defineProperty的用法完成基本的设置，知道get和set的用法\n3. 3.5分：能基本利用defineProperty模拟数据监听，知道将在input的onkeyup进行数据dom操作，能完成并运行示例。\n4. 4.0分：能很快地写出绑定实现，能熟练掌握defineProperty的用法，除了defineProperty外还能使用es6中的prox+reflect实现类似的功能，同理降级的话能用jquery+triger的方式实现。","i18n_question_answer":"html部分：\n```html\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<input type=\"text\" id=\"demo\">\n<p id=\"display\">\n</body>\n</html>\n```\njavascript实现部分\n```javascript\n(function(){\n    var obj={};\n    var bind=[];\n    //触发obj对象set和get方法的时候，趁机来输出或修改bind数组的内容\n    Object.defineProperty(obj,'s',{\n      set:function(val){\n        bind['s']=val;\n      },\n      get:function(){\n        return bind['s'];\n      }\n    })\n    var demo=document.querySelector('#demo');\n    var display=document.querySelector('#display');\n    //#demo的value值与bind['s']绑定，#display的innerHTML也与bind['s']绑定。\n    demo.onkeyup=function(){\n      obj['s']=demo.value;//触发了obj的set方法，等于#demo的value值赋值给bind['s']。\n      display.innerHTML=bind['s'];\n    }\n  })()\n````\n1. 2.5分及以下：完全没有思路，不知道如何利用Object.defineProperty的用法，不知道Property的定义方式\n2. 3.0分：知道用var obj={}和defineProperty的用法完成基本的设置，知道get和set的用法\n3. 3.5分：能基本利用defineProperty模拟数据监听，知道将在input的onkeyup进行数据dom操作，能完成并运行示例。\n4. 4.0分：能很快地写出绑定实现，能熟练掌握defineProperty的用法，除了defineProperty外还能使用es6中的prox+reflect实现类似的功能，同理降级的话能用jquery+triger的方式实现。","status_end_time":null,"assessment_create_time":null},{"id":null,"assessment_status":1,"target_id":"7073761953432652039","target_type":1,"minutes":null,"question_id":"7021058239916312100","question_title":"let,const,var的区别","i18n_question_title":"let,const,var的区别","question_skill_list":[{"name":"JavaScript","i18n_name":"JavaScript","nick_name":null,"description":null}],"score":null,"content":null,"question_description":"请说明一下let,const,var的区别 并回答如下代码会不会报错\n```\nconst a = {};\na.test = 1;\n```","i18n_question_description":"请说明一下let,const,var的区别 并回答如下代码会不会报错\n```\nconst a = {};\na.test = 1;\n```","question_answer":"考察候选人对es6变量声明的理解\n1. let声明的变量拥有块级作用域\n2. let声明的全局变量不是全局对象的属性\n3. let不能重新声明变量\n4. const声明的变量与let声明的变量类似，它们的不同之处在于，const声明的变量只可以在声明时赋值，不可随意修改，否则会导致SyntaxError（语法错误）。\n上面代码只是针对a的引用 并不会报错\n1. 2.5分及以下：\n不知道或者回答错误\n2. 3.0分：\n能大概回答出区别1和4\n3. 3.5分：\n能回答出2和3","i18n_question_answer":"考察候选人对es6变量声明的理解\n1. let声明的变量拥有块级作用域\n2. let声明的全局变量不是全局对象的属性\n3. let不能重新声明变量\n4. const声明的变量与let声明的变量类似，它们的不同之处在于，const声明的变量只可以在声明时赋值，不可随意修改，否则会导致SyntaxError（语法错误）。\n上面代码只是针对a的引用 并不会报错\n1. 2.5分及以下：\n不知道或者回答错误\n2. 3.0分：\n能大概回答出区别1和4\n3. 3.5分：\n能回答出2和3","status_end_time":null,"assessment_create_time":null}],"BaseResp":{"StatusMessage":"SUCCESS","StatusCode":0,"Extra":null}},"message":"OK","special_case_code":0}
